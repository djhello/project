{"version":3,"sources":["ng://@handsontable/angular/lib/hot-table-registerer.service.ts","ng://@handsontable/angular/lib/hot-settings-resolver.service.ts","ng://@handsontable/angular/lib/hot-table.component.ts","ng://@handsontable/angular/lib/hot-column.component.ts","ng://@handsontable/angular/lib/hot-table.module.ts"],"names":["instances","Map","HOT_DESTROYED_WARNING","HotTableRegisterer","prototype","getInstance","id","hotInstance","get","isDestroyed","console","warn","registerInstance","instance","set","removeInstance","delete","Injectable","AVAILABLE_OPTIONS","Object","keys","Handsontable","DefaultSettings","AVAILABLE_HOOKS","hooks","getRegistered","HotSettingsResolver","mergeSettings","component","isSettingsObject","mergedSettings","concat","forEach","key","option","isHook","indexOf","_this","this","args","_i","arguments","length","_ngZone","run","apply","prepareChanges","changes","result","param","hasOwnProperty","currentValue","HotTableComponent","_hotTableRegisterer","_hotSettingsResolver","__hotInstance","columnsComponents","hotId","defineProperty","ngAfterViewInit","options","columns_1","column","push","runOutsideAngular","Core","container","nativeElement","init","ngOnChanges","newOptions","updateHotTable","ngOnDestroy","destroy","newSettings","updateSettings","onAfterColumnsChange","columns_2","columns","onAfterColumnsNumberChange","addColumn","removeColumn","index","splice","Component","selector","template","encapsulation","ViewEncapsulation","None","providers","NgZone","ViewChild","static","Input","HotColumnComponent","parentComponent","firstRun","ngOnInit","HotTableModule","forRoot","ngModule","version","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport Handsontable from 'handsontable/base';\n\nconst instances = new Map<string, Handsontable>();\n\nexport const HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n  ' used properly.';\n\n@Injectable()\nexport class HotTableRegisterer {\n  public getInstance(id: string): Handsontable {\n    const hotInstance = instances.get(id);\n\n    if (hotInstance.isDestroyed) {\n      console.warn(HOT_DESTROYED_WARNING);\n\n      return null;\n    }\n\n    return hotInstance;\n  }\n\n  public registerInstance(id: string, instance: Handsontable): Map<string, Handsontable> {\n    return instances.set(id, instance);\n  }\n\n  public removeInstance(id: string): boolean {\n    return instances.delete(id);\n  }\n}\n","import { Injectable, SimpleChanges } from '@angular/core';\nimport Handsontable from 'handsontable/base';\n\nconst AVAILABLE_OPTIONS: string[] = Object.keys(Handsontable.DefaultSettings);\nconst AVAILABLE_HOOKS: string[] = Handsontable.hooks.getRegistered();\n\n@Injectable()\nexport class HotSettingsResolver {\n  mergeSettings(component): object {\n    const isSettingsObject = typeof component['settings'] === 'object';\n    const mergedSettings: Handsontable.GridSettings = isSettingsObject ? component['settings'] : {};\n    const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n\n    options.forEach(key => {\n      const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n      let option;\n\n      if (isSettingsObject && isHook) {\n        option = component['settings'][key];\n      }\n\n      if (component[key] !== void 0) {\n        option = component[key];\n      }\n\n      if (option === void 0) {\n        return;\n\n      } else if (typeof option === 'function' && isHook) {\n        mergedSettings[key] = function(...args) {\n          return component._ngZone.run(() => {\n              return option.apply(this, args);\n          });\n        };\n\n      } else {\n        mergedSettings[key] = option;\n      }\n    });\n\n    return mergedSettings;\n  }\n\n  prepareChanges(changes: SimpleChanges): Handsontable.GridSettings {\n    const result: Handsontable.GridSettings = {};\n    const parameters: string[] = Object.keys(changes);\n\n    parameters.forEach((param) => {\n      if (changes.hasOwnProperty(param)) {\n        result[param] = changes[param].currentValue;\n      }\n    });\n\n    return result;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport Handsontable from 'handsontable/base';\nimport {\n  HotTableRegisterer,\n  HOT_DESTROYED_WARNING\n} from './hot-table-registerer.service';\nimport { HotSettingsResolver } from './hot-settings-resolver.service';\nimport { HotColumnComponent } from './hot-column.component';\n\n@Component({\n  selector: 'hot-table',\n  template: '<div #container [id]=\"hotId\"></div>',\n  encapsulation: ViewEncapsulation.None,\n  providers: [ HotTableRegisterer, HotSettingsResolver ],\n})\nexport class HotTableComponent implements AfterViewInit, OnChanges, OnDestroy {\n  @ViewChild('container', { static: false }) public container;\n\n  private __hotInstance: Handsontable = null;\n  private columnsComponents: HotColumnComponent[] = [];\n  // component inputs\n  @Input() settings: Handsontable.GridSettings;\n  @Input() hotId = '';\n  // handsontable options\n  @Input() activeHeaderClassName: Handsontable.GridSettings['activeHeaderClassName'];\n  @Input() allowEmpty: Handsontable.GridSettings['allowEmpty'];\n  @Input() allowHtml: Handsontable.GridSettings['allowHtml'];\n  @Input() allowInsertColumn: Handsontable.GridSettings['allowInsertColumn'];\n  @Input() allowInsertRow: Handsontable.GridSettings['allowInsertRow'];\n  @Input() allowInvalid: Handsontable.GridSettings['allowInvalid'];\n  @Input() allowRemoveColumn: Handsontable.GridSettings['allowRemoveColumn'];\n  @Input() allowRemoveRow: Handsontable.GridSettings['allowRemoveRow'];\n  @Input() autoColumnSize: Handsontable.GridSettings['autoColumnSize'];\n  @Input() autoRowSize: Handsontable.GridSettings['autoRowSize'];\n  @Input() autoWrapCol: Handsontable.GridSettings['autoWrapCol'];\n  @Input() autoWrapRow: Handsontable.GridSettings['autoWrapRow'];\n  @Input() bindRowsWithHeaders: Handsontable.GridSettings['bindRowsWithHeaders'];\n  @Input() cell: Handsontable.GridSettings['cell'];\n  @Input() cells: Handsontable.GridSettings['cells'];\n  @Input() checkedTemplate: Handsontable.GridSettings['checkedTemplate'];\n  @Input() className: Handsontable.GridSettings['className'];\n  @Input() colHeaders: Handsontable.GridSettings['colHeaders'];\n  @Input() collapsibleColumns: Handsontable.GridSettings['collapsibleColumns'];\n  @Input() columnHeaderHeight: Handsontable.GridSettings['columnHeaderHeight'];\n  @Input() columns: Handsontable.GridSettings['columns'];\n  @Input() columnSorting: Handsontable.GridSettings['columnSorting'];\n  @Input() columnSummary: Handsontable.GridSettings['columnSummary'];\n  @Input() colWidths: Handsontable.GridSettings['colWidths'];\n  @Input() commentedCellClassName: Handsontable.GridSettings['commentedCellClassName'];\n  @Input() comments: Handsontable.GridSettings['comments'];\n  @Input() contextMenu: Handsontable.GridSettings['contextMenu'];\n  @Input() copyable: Handsontable.GridSettings['copyable'];\n  @Input() copyPaste: Handsontable.GridSettings['copyPaste'];\n  @Input() correctFormat: Handsontable.GridSettings['correctFormat'];\n  @Input() currentColClassName: Handsontable.GridSettings['currentColClassName'];\n  @Input() currentHeaderClassName: Handsontable.GridSettings['currentHeaderClassName'];\n  @Input() currentRowClassName: Handsontable.GridSettings['currentRowClassName'];\n  @Input() customBorders: Handsontable.GridSettings['customBorders'];\n  @Input() data: Handsontable.GridSettings['data'];\n  @Input() dataSchema: Handsontable.GridSettings['dataSchema'];\n  @Input() dateFormat: Handsontable.GridSettings['dateFormat'];\n  @Input() defaultDate: Handsontable.GridSettings['defaultDate'];\n  @Input() disableVisualSelection: Handsontable.GridSettings['disableVisualSelection'];\n  @Input() dragToScroll: Handsontable.GridSettings['dragToScroll'];\n  @Input() dropdownMenu: Handsontable.GridSettings['dropdownMenu'];\n  @Input() editor: Handsontable.GridSettings['editor'];\n  @Input() enterBeginsEditing: Handsontable.GridSettings['enterBeginsEditing'];\n  @Input() enterMoves: Handsontable.GridSettings['enterMoves'];\n  @Input() fillHandle: Handsontable.GridSettings['fillHandle'];\n  @Input() filter: Handsontable.GridSettings['filter'];\n  @Input() filteringCaseSensitive: Handsontable.GridSettings['filteringCaseSensitive'];\n  @Input() filters: Handsontable.GridSettings['filters'];\n  @Input() fixedColumnsLeft: Handsontable.GridSettings['fixedColumnsLeft'];\n  @Input() fixedRowsBottom: Handsontable.GridSettings['fixedRowsBottom'];\n  @Input() fixedRowsTop: Handsontable.GridSettings['fixedRowsTop'];\n  @Input() formulas: Handsontable.GridSettings['formulas'];\n  @Input() fragmentSelection: Handsontable.GridSettings['fragmentSelection'];\n  @Input() height: Handsontable.GridSettings['height'];\n  @Input() hiddenColumns: Handsontable.GridSettings['hiddenColumns'];\n  @Input() hiddenRows: Handsontable.GridSettings['hiddenRows'];\n  @Input() invalidCellClassName: Handsontable.GridSettings['invalidCellClassName'];\n  @Input() label: Handsontable.GridSettings['label'];\n  @Input() language: Handsontable.GridSettings['language'];\n  @Input() licenseKey: Handsontable.GridSettings['licenseKey'];\n  @Input() manualColumnFreeze: Handsontable.GridSettings['manualColumnFreeze'];\n  @Input() manualColumnMove: Handsontable.GridSettings['manualColumnMove'];\n  @Input() manualColumnResize: Handsontable.GridSettings['manualColumnResize'];\n  @Input() manualRowMove: Handsontable.GridSettings['manualRowMove'];\n  @Input() manualRowResize: Handsontable.GridSettings['manualRowResize'];\n  @Input() maxCols: Handsontable.GridSettings['maxCols'];\n  @Input() maxRows: Handsontable.GridSettings['maxRows'];\n  @Input() mergeCells: Handsontable.GridSettings['mergeCells'];\n  @Input() minCols: Handsontable.GridSettings['minCols'];\n  @Input() minRows: Handsontable.GridSettings['minRows'];\n  @Input() minSpareCols: Handsontable.GridSettings['minSpareCols'];\n  @Input() minSpareRows: Handsontable.GridSettings['minSpareRows'];\n  @Input() multiColumnSorting: Handsontable.GridSettings['multiColumnSorting'];\n  @Input() nestedHeaders: Handsontable.GridSettings['nestedHeaders'];\n  @Input() nestedRows: Handsontable.GridSettings['nestedRows'];\n  @Input() noWordWrapClassName: Handsontable.GridSettings['noWordWrapClassName'];\n  @Input() numericFormat: Handsontable.GridSettings['numericFormat'];\n  @Input() observeDOMVisibility: Handsontable.GridSettings['observeDOMVisibility'];\n  @Input() outsideClickDeselects: Handsontable.GridSettings['outsideClickDeselects'];\n  @Input() persistentState: Handsontable.GridSettings['persistentState'];\n  @Input() placeholder: Handsontable.GridSettings['placeholder'];\n  @Input() placeholderCellClassName: Handsontable.GridSettings['placeholderCellClassName'];\n  @Input() preventOverflow: Handsontable.GridSettings['preventOverflow'];\n  @Input() preventWheel: Handsontable.GridSettings['preventWheel'];\n  @Input() readOnly: Handsontable.GridSettings['readOnly'];\n  @Input() readOnlyCellClassName: Handsontable.GridSettings['readOnlyCellClassName'];\n  @Input() renderAllRows: Handsontable.GridSettings['renderAllRows'];\n  @Input() renderer: Handsontable.GridSettings['renderer'];\n  @Input() rowHeaders: Handsontable.GridSettings['rowHeaders'];\n  @Input() rowHeaderWidth: Handsontable.GridSettings['rowHeaderWidth'];\n  @Input() rowHeights: Handsontable.GridSettings['rowHeights'];\n  @Input() search: Handsontable.GridSettings['search'];\n  @Input() selectionMode: Handsontable.GridSettings['selectionMode'];\n  @Input() selectOptions: Handsontable.GridSettings['selectOptions'];\n  @Input() skipColumnOnPaste: Handsontable.GridSettings['skipColumnOnPaste'];\n  @Input() skipRowOnPaste: any;\n  @Input() sortByRelevance: Handsontable.GridSettings['sortByRelevance'];\n  @Input() source: Handsontable.GridSettings['source'];\n  @Input() startCols: Handsontable.GridSettings['startCols'];\n  @Input() startRows: Handsontable.GridSettings['startRows'];\n  @Input() stretchH: Handsontable.GridSettings['stretchH'];\n  @Input() strict: Handsontable.GridSettings['strict'];\n  @Input() tableClassName: Handsontable.GridSettings['tableClassName'];\n  @Input() tabMoves: Handsontable.GridSettings['tabMoves'];\n  @Input() title: Handsontable.GridSettings['title'];\n  @Input() trimDropdown: Handsontable.GridSettings['trimDropdown'];\n  @Input() trimRows: Handsontable.GridSettings['nestedRows'];\n  @Input() trimWhitespace: Handsontable.GridSettings['trimWhitespace'];\n  @Input() type: Handsontable.GridSettings['type'];\n  @Input() uncheckedTemplate: Handsontable.GridSettings['uncheckedTemplate'];\n  @Input() undo: Handsontable.GridSettings['undo'];\n  @Input() validator: Handsontable.GridSettings['validator'];\n  @Input() viewportColumnRenderingOffset: Handsontable.GridSettings['viewportColumnRenderingOffset'];\n  @Input() viewportRowRenderingOffset: Handsontable.GridSettings['viewportRowRenderingOffset'];\n  @Input() visibleRows: Handsontable.GridSettings['visibleRows'];\n  @Input() width: Handsontable.GridSettings['width'];\n  @Input() wordWrap: Handsontable.GridSettings['wordWrap'];\n\n  // handsontable hooks\n  @Input() afterAddChild: Handsontable.GridSettings['afterAddChild'];\n  @Input() afterAutofill: Handsontable.GridSettings['afterAutofill'];\n  @Input() afterBeginEditing: Handsontable.GridSettings['afterBeginEditing'];\n  @Input() afterCellMetaReset: Handsontable.GridSettings['afterCellMetaReset'];\n  @Input() afterChange: Handsontable.GridSettings['afterChange'];\n  @Input() afterChangesObserved: Handsontable.GridSettings['afterChangesObserved'];\n  @Input() afterColumnCollapse: Handsontable.GridSettings['afterColumnCollapse'];\n  @Input() afterColumnExpand: Handsontable.GridSettings['afterColumnExpand'];\n  @Input() afterColumnMove: Handsontable.GridSettings['afterColumnMove'];\n  @Input() afterColumnResize: Handsontable.GridSettings['afterColumnResize'];\n  @Input() afterColumnSort: Handsontable.GridSettings['afterColumnSort'];\n  @Input() afterContextMenuDefaultOptions: Handsontable.GridSettings['afterContextMenuDefaultOptions'];\n  @Input() afterContextMenuHide: Handsontable.GridSettings['afterContextMenuHide'];\n  @Input() afterContextMenuShow: Handsontable.GridSettings['afterContextMenuShow'];\n  @Input() afterCopy: Handsontable.GridSettings['afterCopy'];\n  @Input() afterCopyLimit: Handsontable.GridSettings['afterCopyLimit'];\n  @Input() afterCreateCol: Handsontable.GridSettings['afterCreateCol'];\n  @Input() afterCreateRow: Handsontable.GridSettings['afterCreateRow'];\n  @Input() afterCut: Handsontable.GridSettings['afterCut'];\n  @Input() afterDeselect: Handsontable.GridSettings['afterDeselect'];\n  @Input() afterDestroy: Handsontable.GridSettings['afterDestroy'];\n  @Input() afterDetachChild: Handsontable.GridSettings['afterDetachChild'];\n  @Input() afterDocumentKeyDown: Handsontable.GridSettings['afterDocumentKeyDown'];\n  @Input() afterDrawSelection: Handsontable.GridSettings['afterDrawSelection'];\n  @Input() afterDropdownMenuDefaultOptions: Handsontable.GridSettings['afterDropdownMenuDefaultOptions'];\n  @Input() afterDropdownMenuHide: Handsontable.GridSettings['afterDropdownMenuHide'];\n  @Input() afterDropdownMenuShow: Handsontable.GridSettings['afterDropdownMenuShow'];\n  @Input() afterFilter: Handsontable.GridSettings['afterFilter'];\n  @Input() afterGetCellMeta: Handsontable.GridSettings['afterGetCellMeta'];\n  @Input() afterGetColHeader: Handsontable.GridSettings['afterGetColHeader'];\n  @Input() afterGetColumnHeaderRenderers: Handsontable.GridSettings['afterGetColumnHeaderRenderers'];\n  @Input() afterGetRowHeader: Handsontable.GridSettings['afterGetRowHeader'];\n  @Input() afterGetRowHeaderRenderers: Handsontable.GridSettings['afterGetRowHeaderRenderers'];\n  @Input() afterHideColumns: Handsontable.GridSettings['afterHideColumns'];\n  @Input() afterHideRows: Handsontable.GridSettings['afterHideRows'];\n  @Input() afterInit: Handsontable.GridSettings['afterInit'];\n  @Input() afterLanguageChange: Handsontable.GridSettings['afterLanguageChange'];\n  @Input() afterListen: Handsontable.GridSettings['afterListen'];\n  @Input() afterLoadData: Handsontable.GridSettings['afterLoadData'];\n  @Input() afterMergeCells: Handsontable.GridSettings['afterMergeCells'];\n  @Input() afterModifyTransformEnd: Handsontable.GridSettings['afterModifyTransformEnd'];\n  @Input() afterModifyTransformStart: Handsontable.GridSettings['afterModifyTransformStart'];\n  @Input() afterMomentumScroll: Handsontable.GridSettings['afterMomentumScroll'];\n  @Input() afterOnCellContextMenu: Handsontable.GridSettings['afterOnCellContextMenu'];\n  @Input() afterOnCellCornerDblClick: Handsontable.GridSettings['afterOnCellCornerDblClick'];\n  @Input() afterOnCellCornerMouseDown: Handsontable.GridSettings['afterOnCellCornerMouseDown'];\n  @Input() afterOnCellMouseDown: Handsontable.GridSettings['afterOnCellMouseDown'];\n  @Input() afterOnCellMouseOut: Handsontable.GridSettings['afterOnCellMouseOut'];\n  @Input() afterOnCellMouseOver: Handsontable.GridSettings['afterOnCellMouseOver'];\n  @Input() afterOnCellMouseUp: Handsontable.GridSettings['afterOnCellMouseUp'];\n  @Input() afterPaste: Handsontable.GridSettings['afterPaste'];\n  @Input() afterPluginsInitialized: Handsontable.GridSettings['afterPluginsInitialized'];\n  @Input() afterRedo: Handsontable.GridSettings['afterRedo'];\n  @Input() afterRedoStackChange: Handsontable.GridSettings['afterRedoStackChange'];\n  @Input() afterRefreshDimensions: Handsontable.GridSettings['afterRefreshDimensions'];\n  @Input() afterRemoveCellMeta: Handsontable.GridSettings['afterRemoveCellMeta'];\n  @Input() afterRemoveCol: Handsontable.GridSettings['afterRemoveCol'];\n  @Input() afterRemoveRow: Handsontable.GridSettings['afterRemoveRow'];\n  @Input() afterRender: Handsontable.GridSettings['afterRender'];\n  @Input() afterRenderer: Handsontable.GridSettings['afterRenderer'];\n  @Input() afterRowMove: Handsontable.GridSettings['afterRowMove'];\n  @Input() afterRowResize: Handsontable.GridSettings['afterRowResize'];\n  @Input() afterScrollHorizontally: Handsontable.GridSettings['afterScrollHorizontally'];\n  @Input() afterScrollVertically: Handsontable.GridSettings['afterScrollVertically'];\n  @Input() afterSelection: Handsontable.GridSettings['afterSelection'];\n  @Input() afterSelectionByProp: Handsontable.GridSettings['afterSelectionByProp'];\n  @Input() afterSelectionEnd: Handsontable.GridSettings['afterSelectionEnd'];\n  @Input() afterSelectionEndByProp: Handsontable.GridSettings['afterSelectionEndByProp'];\n  @Input() afterSetCellMeta: Handsontable.GridSettings['afterSetCellMeta'];\n  @Input() afterSetDataAtCell: Handsontable.GridSettings['afterSetDataAtCell'];\n  @Input() afterSetDataAtRowProp: Handsontable.GridSettings['afterSetDataAtRowProp'];\n  @Input() afterSetSourceDataAtCell: Handsontable.GridSettings['afterSetSourceDataAtCell'];\n  @Input() afterTrimRow: Handsontable.GridSettings['afterTrimRow'];\n  @Input() afterUndo: Handsontable.GridSettings['afterUndo'];\n  @Input() afterUndoStackChange: Handsontable.GridSettings['afterUndoStackChange'];\n  @Input() afterUnhideColumns: Handsontable.GridSettings['afterUnhideColumns'];\n  @Input() afterUnhideRows: Handsontable.GridSettings['afterUnhideRows'];\n  @Input() afterUnlisten: Handsontable.GridSettings['afterUnlisten'];\n  @Input() afterUnmergeCells: Handsontable.GridSettings['afterUnmergeCells'];\n  @Input() afterUntrimRow: Handsontable.GridSettings['afterUntrimRow'];\n  @Input() afterUpdateSettings: Handsontable.GridSettings['afterUpdateSettings'];\n  @Input() afterValidate: Handsontable.GridSettings['afterValidate'];\n  @Input() afterViewportColumnCalculatorOverride: Handsontable.GridSettings['afterViewportColumnCalculatorOverride'];\n  @Input() afterViewportRowCalculatorOverride: Handsontable.GridSettings['afterViewportRowCalculatorOverride'];\n  @Input() afterViewRender: Handsontable.GridSettings['afterViewRender'];\n  @Input() beforeAddChild: Handsontable.GridSettings['beforeAddChild'];\n  @Input() beforeAutofill: Handsontable.GridSettings['beforeAutofill'];\n  @Input() beforeAutofillInsidePopulate: Handsontable.GridSettings['beforeAutofillInsidePopulate'];\n  @Input() beforeCellAlignment: Handsontable.GridSettings['beforeCellAlignment'];\n  @Input() beforeChange: Handsontable.GridSettings['beforeChange'];\n  @Input() beforeChangeRender: Handsontable.GridSettings['beforeChangeRender'];\n  @Input() beforeColumnCollapse: Handsontable.GridSettings['beforeColumnCollapse'];\n  @Input() beforeColumnExpand: Handsontable.GridSettings['beforeColumnExpand'];\n  @Input() beforeColumnMove: Handsontable.GridSettings['beforeColumnMove'];\n  @Input() beforeColumnResize: Handsontable.GridSettings['beforeColumnResize'];\n  @Input() beforeColumnSort: Handsontable.GridSettings['beforeColumnSort'];\n  @Input() beforeContextMenuSetItems: Handsontable.GridSettings['beforeContextMenuSetItems'];\n  @Input() beforeContextMenuShow: Handsontable.GridSettings['beforeContextMenuShow'];\n  @Input() beforeCopy: Handsontable.GridSettings['beforeCopy'];\n  @Input() beforeCreateCol: Handsontable.GridSettings['beforeCreateCol'];\n  @Input() beforeCreateRow: Handsontable.GridSettings['beforeCreateRow'];\n  @Input() beforeCut: Handsontable.GridSettings['beforeCut'];\n  @Input() beforeDetachChild: Handsontable.GridSettings['beforeDetachChild'];\n  @Input() beforeDrawBorders: Handsontable.GridSettings['beforeDrawBorders'];\n  @Input() beforeDropdownMenuSetItems: Handsontable.GridSettings['beforeDropdownMenuSetItems'];\n  @Input() beforeDropdownMenuShow: Handsontable.GridSettings['beforeDropdownMenuShow'];\n  @Input() beforeFilter: Handsontable.GridSettings['beforeFilter'];\n  @Input() beforeGetCellMeta: Handsontable.GridSettings['beforeGetCellMeta'];\n  @Input() beforeHideColumns: Handsontable.GridSettings['beforeHideColumns'];\n  @Input() beforeHideRows: Handsontable.GridSettings['beforeHideRows'];\n  @Input() beforeInit: Handsontable.GridSettings['beforeInit'];\n  @Input() beforeInitWalkontable: Handsontable.GridSettings['beforeInitWalkontable'];\n  @Input() beforeKeyDown: Handsontable.GridSettings['beforeKeyDown'];\n  @Input() beforeLanguageChange: Handsontable.GridSettings['beforeLanguageChange'];\n  @Input() beforeLoadData: Handsontable.GridSettings['beforeLoadData'];\n  @Input() beforeMergeCells: Handsontable.GridSettings['beforeMergeCells'];\n  @Input() beforeOnCellContextMenu: Handsontable.GridSettings['beforeOnCellContextMenu'];\n  @Input() beforeOnCellMouseDown: Handsontable.GridSettings['beforeOnCellMouseDown'];\n  @Input() beforeOnCellMouseOut: Handsontable.GridSettings['beforeOnCellMouseOut'];\n  @Input() beforeOnCellMouseOver: Handsontable.GridSettings['beforeOnCellMouseOver'];\n  @Input() beforeOnCellMouseUp: Handsontable.GridSettings['beforeOnCellMouseUp'];\n  @Input() beforePaste: Handsontable.GridSettings['beforePaste'];\n  @Input() beforeRedo: Handsontable.GridSettings['beforeRedo'];\n  @Input() beforeRedoStackChange: Handsontable.GridSettings['beforeRedoStackChange'];\n  @Input() beforeRefreshDimensions: Handsontable.GridSettings['beforeRefreshDimensions'];\n  @Input() beforeRemoveCellClassNames: Handsontable.GridSettings['beforeRemoveCellClassNames'];\n  @Input() beforeRemoveCellMeta: Handsontable.GridSettings['beforeRemoveCellMeta'];\n  @Input() beforeRemoveCol: Handsontable.GridSettings['beforeRemoveCol'];\n  @Input() beforeRemoveRow: Handsontable.GridSettings['beforeRemoveRow'];\n  @Input() beforeRender: Handsontable.GridSettings['beforeRender'];\n  @Input() beforeRenderer: Handsontable.GridSettings['beforeRenderer'];\n  @Input() beforeRowMove: Handsontable.GridSettings['beforeRowMove'];\n  @Input() beforeRowResize: Handsontable.GridSettings['beforeRowResize'];\n  @Input() beforeSetCellMeta: Handsontable.GridSettings['beforeSetCellMeta'];\n  @Input() beforeSetRangeEnd: Handsontable.GridSettings['beforeSetRangeEnd'];\n  @Input() beforeSetRangeStart: Handsontable.GridSettings['beforeSetRangeStart'];\n  @Input() beforeSetRangeStartOnly: Handsontable.GridSettings['beforeSetRangeStartOnly'];\n  @Input() beforeStretchingColumnWidth: Handsontable.GridSettings['beforeStretchingColumnWidth'];\n  @Input() beforeTouchScroll: Handsontable.GridSettings['beforeTouchScroll'];\n  @Input() beforeTrimRow: Handsontable.GridSettings['beforeTrimRow'];\n  @Input() beforeUndo: Handsontable.GridSettings['beforeUndo'];\n  @Input() beforeUndoStackChange: Handsontable.GridSettings['beforeUndoStackChange'];\n  @Input() beforeUnhideColumns: Handsontable.GridSettings['beforeUnhideColumns'];\n  @Input() beforeUnhideRows: Handsontable.GridSettings['beforeUnhideRows'];\n  @Input() beforeUnmergeCells: Handsontable.GridSettings['beforeUnmergeCells'];\n  @Input() beforeUntrimRow: Handsontable.GridSettings['beforeUntrimRow'];\n  @Input() beforeValidate: Handsontable.GridSettings['beforeValidate'];\n  @Input() beforeValueRender: Handsontable.GridSettings['beforeValueRender'];\n  @Input() beforeViewRender: Handsontable.GridSettings['beforeViewRender'];\n  @Input() construct: Handsontable.GridSettings['construct'];\n  @Input() init: Handsontable.GridSettings['init'];\n  @Input() modifyAutoColumnSizeSeed: Handsontable.GridSettings['modifyAutoColumnSizeSeed'];\n  @Input() modifyAutofillRange: Handsontable.GridSettings['modifyAutofillRange'];\n  @Input() modifyColHeader: Handsontable.GridSettings['modifyColHeader'];\n  @Input() modifyColumnHeaderHeight: Handsontable.GridSettings['modifyColumnHeaderHeight'];\n  @Input() modifyColWidth: Handsontable.GridSettings['modifyColWidth'];\n  @Input() modifyCopyableRange: Handsontable.GridSettings['modifyCopyableRange'];\n  @Input() modifyData: Handsontable.GridSettings['modifyData'];\n  @Input() modifyGetCellCoords: Handsontable.GridSettings['modifyGetCellCoords'];\n  @Input() modifyRowData: Handsontable.GridSettings['modifyRowData'];\n  @Input() modifyRowHeader: Handsontable.GridSettings['modifyRowHeader'];\n  @Input() modifyRowHeaderWidth: Handsontable.GridSettings['modifyRowHeaderWidth'];\n  @Input() modifyRowHeight: Handsontable.GridSettings['modifyRowHeight'];\n  @Input() modifySourceData: Handsontable.GridSettings['modifySourceData'];\n  @Input() modifyTransformEnd: Handsontable.GridSettings['modifyTransformEnd'];\n  @Input() modifyTransformStart: Handsontable.GridSettings['modifyTransformStart'];\n  @Input() persistentStateLoad: Handsontable.GridSettings['persistentStateLoad'];\n  @Input() persistentStateReset: Handsontable.GridSettings['persistentStateReset'];\n  @Input() persistentStateSave: Handsontable.GridSettings['persistentStateSave'];\n\n  constructor(\n    private _ngZone: NgZone,\n    private _hotTableRegisterer: HotTableRegisterer,\n    private _hotSettingsResolver: HotSettingsResolver,\n  ) {}\n\n  private get hotInstance(): Handsontable | null {\n    if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n      // Will return the Handsontable instance or `null` if it's not yet been created.\n      return this.__hotInstance;\n\n    } else {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n\n      console.warn(HOT_DESTROYED_WARNING);\n\n      return null;\n    }\n  }\n\n  private set hotInstance(hotInstance) {\n    this.__hotInstance = hotInstance;\n  }\n\n  ngAfterViewInit(): void {\n    const options: Handsontable.GridSettings = this._hotSettingsResolver.mergeSettings(this);\n\n    if (this.columnsComponents.length > 0) {\n      const columns = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      options['columns'] = columns;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\n\n      if (this.hotId) {\n        this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n      }\n      // @ts-ignore\n      this.hotInstance.init();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.hotInstance === null) {\n      return;\n    }\n\n    const newOptions: Handsontable.GridSettings = this._hotSettingsResolver.prepareChanges(changes);\n\n    this.updateHotTable(newOptions);\n  }\n\n  ngOnDestroy(): void {\n    this._ngZone.runOutsideAngular(() => {\n      if (this.hotInstance) {\n        this.hotInstance.destroy();\n      }\n    });\n\n    if (this.hotId) {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n    }\n  }\n\n  updateHotTable(newSettings: Handsontable.GridSettings ): void {\n    if (!this.hotInstance) {\n      return;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance.updateSettings(newSettings, false);\n    });\n  }\n\n  onAfterColumnsChange(): void {\n    if (this.columnsComponents === void 0) {\n      return;\n    }\n\n    if (this.columnsComponents.length > 0) {\n      const columns: Handsontable.ColumnSettings[] = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      const newOptions = {\n        columns: columns\n      };\n\n      this.updateHotTable(newOptions);\n    }\n  }\n\n  onAfterColumnsNumberChange(): void {\n    const columns: Handsontable.ColumnSettings[] = [];\n\n    if (this.columnsComponents.length > 0) {\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n    }\n\n    this.updateHotTable({ columns });\n  }\n\n  addColumn(column: HotColumnComponent): void {\n    this.columnsComponents.push(column);\n    this.onAfterColumnsNumberChange();\n  }\n\n  removeColumn(column: HotColumnComponent): void {\n    const index: number = this.columnsComponents.indexOf(column);\n\n    this.columnsComponents.splice(index, 1);\n    this.onAfterColumnsNumberChange();\n  }\n\n}\n","import {\n  Component,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Input,\n} from '@angular/core';\nimport { HotTableComponent } from './hot-table.component';\nimport Handsontable from 'handsontable/base';\n\n@Component({\n  selector: 'hot-column',\n  template: '',\n})\nexport class HotColumnComponent implements OnInit, OnChanges, OnDestroy {\n  private firstRun = true;\n  // handsontable column options\n  @Input() allowEmpty: Handsontable.ColumnSettings['allowEmpty'];\n  @Input() allowHtml: Handsontable.ColumnSettings['allowHtml'];\n  @Input() allowInvalid: Handsontable.ColumnSettings['allowInvalid'];\n  @Input() checkedTemplate: Handsontable.ColumnSettings['checkedTemplate'];\n  @Input() className: Handsontable.ColumnSettings['className'];\n  @Input() columnSorting: Handsontable.ColumnSettings['columnSorting'];\n  @Input() colWidths: Handsontable.ColumnSettings['colWidths'];\n  @Input() commentedCellClassName: Handsontable.ColumnSettings['commentedCellClassName'];\n  @Input() copyable: Handsontable.ColumnSettings['copyable'];\n  @Input() correctFormat: Handsontable.ColumnSettings['correctFormat'];\n  @Input() data: Handsontable.ColumnSettings['data'];\n  @Input() dateFormat: Handsontable.ColumnSettings['dateFormat'];\n  @Input() defaultDate: Handsontable.ColumnSettings['defaultDate'];\n  @Input() editor: Handsontable.ColumnSettings['editor'];\n  @Input() filteringCaseSensitive: Handsontable.ColumnSettings['filteringCaseSensitive'];\n  @Input() invalidCellClassName: Handsontable.ColumnSettings['invalidCellClassName'];\n  @Input() label: Handsontable.ColumnSettings['label'];\n  @Input() language: Handsontable.ColumnSettings['language'];\n  @Input() noWordWrapClassName: Handsontable.ColumnSettings['noWordWrapClassName'];\n  @Input() numericFormat: Handsontable.ColumnSettings['numericFormat'];\n  @Input() placeholder: Handsontable.ColumnSettings['placeholder'];\n  @Input() placeholderCellClassName: Handsontable.ColumnSettings['placeholderCellClassName'];\n  @Input() readOnly: Handsontable.ColumnSettings['readOnly'];\n  @Input() readOnlyCellClassName: Handsontable.ColumnSettings['readOnlyCellClassName'];\n  @Input() renderer: Handsontable.ColumnSettings['renderer'];\n  @Input() selectOptions: Handsontable.ColumnSettings['selectOptions'];\n  @Input() skipColumnOnPaste: Handsontable.ColumnSettings['skipColumnOnPaste'];\n  @Input() sortByRelevance: Handsontable.ColumnSettings['sortByRelevance'];\n  @Input() source: Handsontable.ColumnSettings['source'];\n  @Input() strict: Handsontable.ColumnSettings['strict'];\n  @Input() title: Handsontable.ColumnSettings['title'];\n  @Input() trimDropdown: Handsontable.ColumnSettings['trimDropdown'];\n  @Input() type: Handsontable.ColumnSettings['type'];\n  @Input() uncheckedTemplate: Handsontable.ColumnSettings['uncheckedTemplate'];\n  @Input() validator: Handsontable.ColumnSettings['validator'];\n  @Input() visibleRows: Handsontable.ColumnSettings['visibleRows'];\n  @Input() width: Handsontable.ColumnSettings['width'];\n  @Input() wordWrap: Handsontable.ColumnSettings['wordWrap'];\n\n  constructor(private parentComponent: HotTableComponent) {}\n\n  ngOnInit(): void {\n    this.firstRun = false;\n    this.parentComponent.addColumn(this);\n  }\n\n  ngOnChanges(): void {\n    if (this.firstRun) {\n      return;\n    }\n\n    this.parentComponent.onAfterColumnsChange();\n  }\n\n  ngOnDestroy(): void {\n    this.parentComponent.removeColumn(this);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HotTableComponent } from './hot-table.component';\nimport { HotColumnComponent } from './hot-column.component';\nimport { HotTableRegisterer } from './hot-table-registerer.service';\n\n@NgModule({\n  declarations: [\n    HotTableComponent,\n    HotColumnComponent,\n  ],\n  exports: [\n    HotTableComponent,\n    HotColumnComponent,\n  ]\n})\nexport class HotTableModule {\n  static version = '11.0.1';\n\n  public static forRoot(): ModuleWithProviders<HotTableModule> {\n    return {\n      ngModule: HotTableModule,\n      providers: [ HotTableRegisterer ],\n    };\n  }\n}\n"]}