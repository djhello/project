{"version":3,"file":"handsontable-angular.umd.js","sources":["ng://@handsontable/angular/lib/hot-table-registerer.service.ts","ng://@handsontable/angular/lib/hot-settings-resolver.service.ts","ng://@handsontable/angular/lib/hot-table.component.ts","ng://@handsontable/angular/lib/hot-column.component.ts","ng://@handsontable/angular/lib/hot-table.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport Handsontable from 'handsontable/base';\n\nconst instances = new Map<string, Handsontable>();\n\nexport const HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n  ' used properly.';\n\n@Injectable()\nexport class HotTableRegisterer {\n  public getInstance(id: string): Handsontable {\n    const hotInstance = instances.get(id);\n\n    if (hotInstance.isDestroyed) {\n      console.warn(HOT_DESTROYED_WARNING);\n\n      return null;\n    }\n\n    return hotInstance;\n  }\n\n  public registerInstance(id: string, instance: Handsontable): Map<string, Handsontable> {\n    return instances.set(id, instance);\n  }\n\n  public removeInstance(id: string): boolean {\n    return instances.delete(id);\n  }\n}\n","import { Injectable, SimpleChanges } from '@angular/core';\nimport Handsontable from 'handsontable/base';\n\nconst AVAILABLE_OPTIONS: string[] = Object.keys(Handsontable.DefaultSettings);\nconst AVAILABLE_HOOKS: string[] = Handsontable.hooks.getRegistered();\n\n@Injectable()\nexport class HotSettingsResolver {\n  mergeSettings(component): object {\n    const isSettingsObject = typeof component['settings'] === 'object';\n    const mergedSettings: Handsontable.GridSettings = isSettingsObject ? component['settings'] : {};\n    const options = AVAILABLE_HOOKS.concat(AVAILABLE_OPTIONS);\n\n    options.forEach(key => {\n      const isHook = AVAILABLE_HOOKS.indexOf(key) > -1;\n      let option;\n\n      if (isSettingsObject && isHook) {\n        option = component['settings'][key];\n      }\n\n      if (component[key] !== void 0) {\n        option = component[key];\n      }\n\n      if (option === void 0) {\n        return;\n\n      } else if (typeof option === 'function' && isHook) {\n        mergedSettings[key] = function(...args) {\n          return component._ngZone.run(() => {\n              return option.apply(this, args);\n          });\n        };\n\n      } else {\n        mergedSettings[key] = option;\n      }\n    });\n\n    return mergedSettings;\n  }\n\n  prepareChanges(changes: SimpleChanges): Handsontable.GridSettings {\n    const result: Handsontable.GridSettings = {};\n    const parameters: string[] = Object.keys(changes);\n\n    parameters.forEach((param) => {\n      if (changes.hasOwnProperty(param)) {\n        result[param] = changes[param].currentValue;\n      }\n    });\n\n    return result;\n  }\n}\n","import {\n  AfterViewInit,\n  Component,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport Handsontable from 'handsontable/base';\nimport {\n  HotTableRegisterer,\n  HOT_DESTROYED_WARNING\n} from './hot-table-registerer.service';\nimport { HotSettingsResolver } from './hot-settings-resolver.service';\nimport { HotColumnComponent } from './hot-column.component';\n\n@Component({\n  selector: 'hot-table',\n  template: '<div #container [id]=\"hotId\"></div>',\n  encapsulation: ViewEncapsulation.None,\n  providers: [ HotTableRegisterer, HotSettingsResolver ],\n})\nexport class HotTableComponent implements AfterViewInit, OnChanges, OnDestroy {\n  @ViewChild('container', { static: false }) public container;\n\n  private __hotInstance: Handsontable = null;\n  private columnsComponents: HotColumnComponent[] = [];\n  // component inputs\n  @Input() settings: Handsontable.GridSettings;\n  @Input() hotId = '';\n  // handsontable options\n  @Input() activeHeaderClassName: Handsontable.GridSettings['activeHeaderClassName'];\n  @Input() allowEmpty: Handsontable.GridSettings['allowEmpty'];\n  @Input() allowHtml: Handsontable.GridSettings['allowHtml'];\n  @Input() allowInsertColumn: Handsontable.GridSettings['allowInsertColumn'];\n  @Input() allowInsertRow: Handsontable.GridSettings['allowInsertRow'];\n  @Input() allowInvalid: Handsontable.GridSettings['allowInvalid'];\n  @Input() allowRemoveColumn: Handsontable.GridSettings['allowRemoveColumn'];\n  @Input() allowRemoveRow: Handsontable.GridSettings['allowRemoveRow'];\n  @Input() autoColumnSize: Handsontable.GridSettings['autoColumnSize'];\n  @Input() autoRowSize: Handsontable.GridSettings['autoRowSize'];\n  @Input() autoWrapCol: Handsontable.GridSettings['autoWrapCol'];\n  @Input() autoWrapRow: Handsontable.GridSettings['autoWrapRow'];\n  @Input() bindRowsWithHeaders: Handsontable.GridSettings['bindRowsWithHeaders'];\n  @Input() cell: Handsontable.GridSettings['cell'];\n  @Input() cells: Handsontable.GridSettings['cells'];\n  @Input() checkedTemplate: Handsontable.GridSettings['checkedTemplate'];\n  @Input() className: Handsontable.GridSettings['className'];\n  @Input() colHeaders: Handsontable.GridSettings['colHeaders'];\n  @Input() collapsibleColumns: Handsontable.GridSettings['collapsibleColumns'];\n  @Input() columnHeaderHeight: Handsontable.GridSettings['columnHeaderHeight'];\n  @Input() columns: Handsontable.GridSettings['columns'];\n  @Input() columnSorting: Handsontable.GridSettings['columnSorting'];\n  @Input() columnSummary: Handsontable.GridSettings['columnSummary'];\n  @Input() colWidths: Handsontable.GridSettings['colWidths'];\n  @Input() commentedCellClassName: Handsontable.GridSettings['commentedCellClassName'];\n  @Input() comments: Handsontable.GridSettings['comments'];\n  @Input() contextMenu: Handsontable.GridSettings['contextMenu'];\n  @Input() copyable: Handsontable.GridSettings['copyable'];\n  @Input() copyPaste: Handsontable.GridSettings['copyPaste'];\n  @Input() correctFormat: Handsontable.GridSettings['correctFormat'];\n  @Input() currentColClassName: Handsontable.GridSettings['currentColClassName'];\n  @Input() currentHeaderClassName: Handsontable.GridSettings['currentHeaderClassName'];\n  @Input() currentRowClassName: Handsontable.GridSettings['currentRowClassName'];\n  @Input() customBorders: Handsontable.GridSettings['customBorders'];\n  @Input() data: Handsontable.GridSettings['data'];\n  @Input() dataSchema: Handsontable.GridSettings['dataSchema'];\n  @Input() dateFormat: Handsontable.GridSettings['dateFormat'];\n  @Input() defaultDate: Handsontable.GridSettings['defaultDate'];\n  @Input() disableVisualSelection: Handsontable.GridSettings['disableVisualSelection'];\n  @Input() dragToScroll: Handsontable.GridSettings['dragToScroll'];\n  @Input() dropdownMenu: Handsontable.GridSettings['dropdownMenu'];\n  @Input() editor: Handsontable.GridSettings['editor'];\n  @Input() enterBeginsEditing: Handsontable.GridSettings['enterBeginsEditing'];\n  @Input() enterMoves: Handsontable.GridSettings['enterMoves'];\n  @Input() fillHandle: Handsontable.GridSettings['fillHandle'];\n  @Input() filter: Handsontable.GridSettings['filter'];\n  @Input() filteringCaseSensitive: Handsontable.GridSettings['filteringCaseSensitive'];\n  @Input() filters: Handsontable.GridSettings['filters'];\n  @Input() fixedColumnsLeft: Handsontable.GridSettings['fixedColumnsLeft'];\n  @Input() fixedRowsBottom: Handsontable.GridSettings['fixedRowsBottom'];\n  @Input() fixedRowsTop: Handsontable.GridSettings['fixedRowsTop'];\n  @Input() formulas: Handsontable.GridSettings['formulas'];\n  @Input() fragmentSelection: Handsontable.GridSettings['fragmentSelection'];\n  @Input() height: Handsontable.GridSettings['height'];\n  @Input() hiddenColumns: Handsontable.GridSettings['hiddenColumns'];\n  @Input() hiddenRows: Handsontable.GridSettings['hiddenRows'];\n  @Input() invalidCellClassName: Handsontable.GridSettings['invalidCellClassName'];\n  @Input() label: Handsontable.GridSettings['label'];\n  @Input() language: Handsontable.GridSettings['language'];\n  @Input() licenseKey: Handsontable.GridSettings['licenseKey'];\n  @Input() manualColumnFreeze: Handsontable.GridSettings['manualColumnFreeze'];\n  @Input() manualColumnMove: Handsontable.GridSettings['manualColumnMove'];\n  @Input() manualColumnResize: Handsontable.GridSettings['manualColumnResize'];\n  @Input() manualRowMove: Handsontable.GridSettings['manualRowMove'];\n  @Input() manualRowResize: Handsontable.GridSettings['manualRowResize'];\n  @Input() maxCols: Handsontable.GridSettings['maxCols'];\n  @Input() maxRows: Handsontable.GridSettings['maxRows'];\n  @Input() mergeCells: Handsontable.GridSettings['mergeCells'];\n  @Input() minCols: Handsontable.GridSettings['minCols'];\n  @Input() minRows: Handsontable.GridSettings['minRows'];\n  @Input() minSpareCols: Handsontable.GridSettings['minSpareCols'];\n  @Input() minSpareRows: Handsontable.GridSettings['minSpareRows'];\n  @Input() multiColumnSorting: Handsontable.GridSettings['multiColumnSorting'];\n  @Input() nestedHeaders: Handsontable.GridSettings['nestedHeaders'];\n  @Input() nestedRows: Handsontable.GridSettings['nestedRows'];\n  @Input() noWordWrapClassName: Handsontable.GridSettings['noWordWrapClassName'];\n  @Input() numericFormat: Handsontable.GridSettings['numericFormat'];\n  @Input() observeDOMVisibility: Handsontable.GridSettings['observeDOMVisibility'];\n  @Input() outsideClickDeselects: Handsontable.GridSettings['outsideClickDeselects'];\n  @Input() persistentState: Handsontable.GridSettings['persistentState'];\n  @Input() placeholder: Handsontable.GridSettings['placeholder'];\n  @Input() placeholderCellClassName: Handsontable.GridSettings['placeholderCellClassName'];\n  @Input() preventOverflow: Handsontable.GridSettings['preventOverflow'];\n  @Input() preventWheel: Handsontable.GridSettings['preventWheel'];\n  @Input() readOnly: Handsontable.GridSettings['readOnly'];\n  @Input() readOnlyCellClassName: Handsontable.GridSettings['readOnlyCellClassName'];\n  @Input() renderAllRows: Handsontable.GridSettings['renderAllRows'];\n  @Input() renderer: Handsontable.GridSettings['renderer'];\n  @Input() rowHeaders: Handsontable.GridSettings['rowHeaders'];\n  @Input() rowHeaderWidth: Handsontable.GridSettings['rowHeaderWidth'];\n  @Input() rowHeights: Handsontable.GridSettings['rowHeights'];\n  @Input() search: Handsontable.GridSettings['search'];\n  @Input() selectionMode: Handsontable.GridSettings['selectionMode'];\n  @Input() selectOptions: Handsontable.GridSettings['selectOptions'];\n  @Input() skipColumnOnPaste: Handsontable.GridSettings['skipColumnOnPaste'];\n  @Input() skipRowOnPaste: any;\n  @Input() sortByRelevance: Handsontable.GridSettings['sortByRelevance'];\n  @Input() source: Handsontable.GridSettings['source'];\n  @Input() startCols: Handsontable.GridSettings['startCols'];\n  @Input() startRows: Handsontable.GridSettings['startRows'];\n  @Input() stretchH: Handsontable.GridSettings['stretchH'];\n  @Input() strict: Handsontable.GridSettings['strict'];\n  @Input() tableClassName: Handsontable.GridSettings['tableClassName'];\n  @Input() tabMoves: Handsontable.GridSettings['tabMoves'];\n  @Input() title: Handsontable.GridSettings['title'];\n  @Input() trimDropdown: Handsontable.GridSettings['trimDropdown'];\n  @Input() trimRows: Handsontable.GridSettings['nestedRows'];\n  @Input() trimWhitespace: Handsontable.GridSettings['trimWhitespace'];\n  @Input() type: Handsontable.GridSettings['type'];\n  @Input() uncheckedTemplate: Handsontable.GridSettings['uncheckedTemplate'];\n  @Input() undo: Handsontable.GridSettings['undo'];\n  @Input() validator: Handsontable.GridSettings['validator'];\n  @Input() viewportColumnRenderingOffset: Handsontable.GridSettings['viewportColumnRenderingOffset'];\n  @Input() viewportRowRenderingOffset: Handsontable.GridSettings['viewportRowRenderingOffset'];\n  @Input() visibleRows: Handsontable.GridSettings['visibleRows'];\n  @Input() width: Handsontable.GridSettings['width'];\n  @Input() wordWrap: Handsontable.GridSettings['wordWrap'];\n\n  // handsontable hooks\n  @Input() afterAddChild: Handsontable.GridSettings['afterAddChild'];\n  @Input() afterAutofill: Handsontable.GridSettings['afterAutofill'];\n  @Input() afterBeginEditing: Handsontable.GridSettings['afterBeginEditing'];\n  @Input() afterCellMetaReset: Handsontable.GridSettings['afterCellMetaReset'];\n  @Input() afterChange: Handsontable.GridSettings['afterChange'];\n  @Input() afterChangesObserved: Handsontable.GridSettings['afterChangesObserved'];\n  @Input() afterColumnCollapse: Handsontable.GridSettings['afterColumnCollapse'];\n  @Input() afterColumnExpand: Handsontable.GridSettings['afterColumnExpand'];\n  @Input() afterColumnMove: Handsontable.GridSettings['afterColumnMove'];\n  @Input() afterColumnResize: Handsontable.GridSettings['afterColumnResize'];\n  @Input() afterColumnSort: Handsontable.GridSettings['afterColumnSort'];\n  @Input() afterContextMenuDefaultOptions: Handsontable.GridSettings['afterContextMenuDefaultOptions'];\n  @Input() afterContextMenuHide: Handsontable.GridSettings['afterContextMenuHide'];\n  @Input() afterContextMenuShow: Handsontable.GridSettings['afterContextMenuShow'];\n  @Input() afterCopy: Handsontable.GridSettings['afterCopy'];\n  @Input() afterCopyLimit: Handsontable.GridSettings['afterCopyLimit'];\n  @Input() afterCreateCol: Handsontable.GridSettings['afterCreateCol'];\n  @Input() afterCreateRow: Handsontable.GridSettings['afterCreateRow'];\n  @Input() afterCut: Handsontable.GridSettings['afterCut'];\n  @Input() afterDeselect: Handsontable.GridSettings['afterDeselect'];\n  @Input() afterDestroy: Handsontable.GridSettings['afterDestroy'];\n  @Input() afterDetachChild: Handsontable.GridSettings['afterDetachChild'];\n  @Input() afterDocumentKeyDown: Handsontable.GridSettings['afterDocumentKeyDown'];\n  @Input() afterDrawSelection: Handsontable.GridSettings['afterDrawSelection'];\n  @Input() afterDropdownMenuDefaultOptions: Handsontable.GridSettings['afterDropdownMenuDefaultOptions'];\n  @Input() afterDropdownMenuHide: Handsontable.GridSettings['afterDropdownMenuHide'];\n  @Input() afterDropdownMenuShow: Handsontable.GridSettings['afterDropdownMenuShow'];\n  @Input() afterFilter: Handsontable.GridSettings['afterFilter'];\n  @Input() afterGetCellMeta: Handsontable.GridSettings['afterGetCellMeta'];\n  @Input() afterGetColHeader: Handsontable.GridSettings['afterGetColHeader'];\n  @Input() afterGetColumnHeaderRenderers: Handsontable.GridSettings['afterGetColumnHeaderRenderers'];\n  @Input() afterGetRowHeader: Handsontable.GridSettings['afterGetRowHeader'];\n  @Input() afterGetRowHeaderRenderers: Handsontable.GridSettings['afterGetRowHeaderRenderers'];\n  @Input() afterHideColumns: Handsontable.GridSettings['afterHideColumns'];\n  @Input() afterHideRows: Handsontable.GridSettings['afterHideRows'];\n  @Input() afterInit: Handsontable.GridSettings['afterInit'];\n  @Input() afterLanguageChange: Handsontable.GridSettings['afterLanguageChange'];\n  @Input() afterListen: Handsontable.GridSettings['afterListen'];\n  @Input() afterLoadData: Handsontable.GridSettings['afterLoadData'];\n  @Input() afterMergeCells: Handsontable.GridSettings['afterMergeCells'];\n  @Input() afterModifyTransformEnd: Handsontable.GridSettings['afterModifyTransformEnd'];\n  @Input() afterModifyTransformStart: Handsontable.GridSettings['afterModifyTransformStart'];\n  @Input() afterMomentumScroll: Handsontable.GridSettings['afterMomentumScroll'];\n  @Input() afterOnCellContextMenu: Handsontable.GridSettings['afterOnCellContextMenu'];\n  @Input() afterOnCellCornerDblClick: Handsontable.GridSettings['afterOnCellCornerDblClick'];\n  @Input() afterOnCellCornerMouseDown: Handsontable.GridSettings['afterOnCellCornerMouseDown'];\n  @Input() afterOnCellMouseDown: Handsontable.GridSettings['afterOnCellMouseDown'];\n  @Input() afterOnCellMouseOut: Handsontable.GridSettings['afterOnCellMouseOut'];\n  @Input() afterOnCellMouseOver: Handsontable.GridSettings['afterOnCellMouseOver'];\n  @Input() afterOnCellMouseUp: Handsontable.GridSettings['afterOnCellMouseUp'];\n  @Input() afterPaste: Handsontable.GridSettings['afterPaste'];\n  @Input() afterPluginsInitialized: Handsontable.GridSettings['afterPluginsInitialized'];\n  @Input() afterRedo: Handsontable.GridSettings['afterRedo'];\n  @Input() afterRedoStackChange: Handsontable.GridSettings['afterRedoStackChange'];\n  @Input() afterRefreshDimensions: Handsontable.GridSettings['afterRefreshDimensions'];\n  @Input() afterRemoveCellMeta: Handsontable.GridSettings['afterRemoveCellMeta'];\n  @Input() afterRemoveCol: Handsontable.GridSettings['afterRemoveCol'];\n  @Input() afterRemoveRow: Handsontable.GridSettings['afterRemoveRow'];\n  @Input() afterRender: Handsontable.GridSettings['afterRender'];\n  @Input() afterRenderer: Handsontable.GridSettings['afterRenderer'];\n  @Input() afterRowMove: Handsontable.GridSettings['afterRowMove'];\n  @Input() afterRowResize: Handsontable.GridSettings['afterRowResize'];\n  @Input() afterScrollHorizontally: Handsontable.GridSettings['afterScrollHorizontally'];\n  @Input() afterScrollVertically: Handsontable.GridSettings['afterScrollVertically'];\n  @Input() afterSelection: Handsontable.GridSettings['afterSelection'];\n  @Input() afterSelectionByProp: Handsontable.GridSettings['afterSelectionByProp'];\n  @Input() afterSelectionEnd: Handsontable.GridSettings['afterSelectionEnd'];\n  @Input() afterSelectionEndByProp: Handsontable.GridSettings['afterSelectionEndByProp'];\n  @Input() afterSetCellMeta: Handsontable.GridSettings['afterSetCellMeta'];\n  @Input() afterSetDataAtCell: Handsontable.GridSettings['afterSetDataAtCell'];\n  @Input() afterSetDataAtRowProp: Handsontable.GridSettings['afterSetDataAtRowProp'];\n  @Input() afterSetSourceDataAtCell: Handsontable.GridSettings['afterSetSourceDataAtCell'];\n  @Input() afterTrimRow: Handsontable.GridSettings['afterTrimRow'];\n  @Input() afterUndo: Handsontable.GridSettings['afterUndo'];\n  @Input() afterUndoStackChange: Handsontable.GridSettings['afterUndoStackChange'];\n  @Input() afterUnhideColumns: Handsontable.GridSettings['afterUnhideColumns'];\n  @Input() afterUnhideRows: Handsontable.GridSettings['afterUnhideRows'];\n  @Input() afterUnlisten: Handsontable.GridSettings['afterUnlisten'];\n  @Input() afterUnmergeCells: Handsontable.GridSettings['afterUnmergeCells'];\n  @Input() afterUntrimRow: Handsontable.GridSettings['afterUntrimRow'];\n  @Input() afterUpdateSettings: Handsontable.GridSettings['afterUpdateSettings'];\n  @Input() afterValidate: Handsontable.GridSettings['afterValidate'];\n  @Input() afterViewportColumnCalculatorOverride: Handsontable.GridSettings['afterViewportColumnCalculatorOverride'];\n  @Input() afterViewportRowCalculatorOverride: Handsontable.GridSettings['afterViewportRowCalculatorOverride'];\n  @Input() afterViewRender: Handsontable.GridSettings['afterViewRender'];\n  @Input() beforeAddChild: Handsontable.GridSettings['beforeAddChild'];\n  @Input() beforeAutofill: Handsontable.GridSettings['beforeAutofill'];\n  @Input() beforeAutofillInsidePopulate: Handsontable.GridSettings['beforeAutofillInsidePopulate'];\n  @Input() beforeCellAlignment: Handsontable.GridSettings['beforeCellAlignment'];\n  @Input() beforeChange: Handsontable.GridSettings['beforeChange'];\n  @Input() beforeChangeRender: Handsontable.GridSettings['beforeChangeRender'];\n  @Input() beforeColumnCollapse: Handsontable.GridSettings['beforeColumnCollapse'];\n  @Input() beforeColumnExpand: Handsontable.GridSettings['beforeColumnExpand'];\n  @Input() beforeColumnMove: Handsontable.GridSettings['beforeColumnMove'];\n  @Input() beforeColumnResize: Handsontable.GridSettings['beforeColumnResize'];\n  @Input() beforeColumnSort: Handsontable.GridSettings['beforeColumnSort'];\n  @Input() beforeContextMenuSetItems: Handsontable.GridSettings['beforeContextMenuSetItems'];\n  @Input() beforeContextMenuShow: Handsontable.GridSettings['beforeContextMenuShow'];\n  @Input() beforeCopy: Handsontable.GridSettings['beforeCopy'];\n  @Input() beforeCreateCol: Handsontable.GridSettings['beforeCreateCol'];\n  @Input() beforeCreateRow: Handsontable.GridSettings['beforeCreateRow'];\n  @Input() beforeCut: Handsontable.GridSettings['beforeCut'];\n  @Input() beforeDetachChild: Handsontable.GridSettings['beforeDetachChild'];\n  @Input() beforeDrawBorders: Handsontable.GridSettings['beforeDrawBorders'];\n  @Input() beforeDropdownMenuSetItems: Handsontable.GridSettings['beforeDropdownMenuSetItems'];\n  @Input() beforeDropdownMenuShow: Handsontable.GridSettings['beforeDropdownMenuShow'];\n  @Input() beforeFilter: Handsontable.GridSettings['beforeFilter'];\n  @Input() beforeGetCellMeta: Handsontable.GridSettings['beforeGetCellMeta'];\n  @Input() beforeHideColumns: Handsontable.GridSettings['beforeHideColumns'];\n  @Input() beforeHideRows: Handsontable.GridSettings['beforeHideRows'];\n  @Input() beforeInit: Handsontable.GridSettings['beforeInit'];\n  @Input() beforeInitWalkontable: Handsontable.GridSettings['beforeInitWalkontable'];\n  @Input() beforeKeyDown: Handsontable.GridSettings['beforeKeyDown'];\n  @Input() beforeLanguageChange: Handsontable.GridSettings['beforeLanguageChange'];\n  @Input() beforeLoadData: Handsontable.GridSettings['beforeLoadData'];\n  @Input() beforeMergeCells: Handsontable.GridSettings['beforeMergeCells'];\n  @Input() beforeOnCellContextMenu: Handsontable.GridSettings['beforeOnCellContextMenu'];\n  @Input() beforeOnCellMouseDown: Handsontable.GridSettings['beforeOnCellMouseDown'];\n  @Input() beforeOnCellMouseOut: Handsontable.GridSettings['beforeOnCellMouseOut'];\n  @Input() beforeOnCellMouseOver: Handsontable.GridSettings['beforeOnCellMouseOver'];\n  @Input() beforeOnCellMouseUp: Handsontable.GridSettings['beforeOnCellMouseUp'];\n  @Input() beforePaste: Handsontable.GridSettings['beforePaste'];\n  @Input() beforeRedo: Handsontable.GridSettings['beforeRedo'];\n  @Input() beforeRedoStackChange: Handsontable.GridSettings['beforeRedoStackChange'];\n  @Input() beforeRefreshDimensions: Handsontable.GridSettings['beforeRefreshDimensions'];\n  @Input() beforeRemoveCellClassNames: Handsontable.GridSettings['beforeRemoveCellClassNames'];\n  @Input() beforeRemoveCellMeta: Handsontable.GridSettings['beforeRemoveCellMeta'];\n  @Input() beforeRemoveCol: Handsontable.GridSettings['beforeRemoveCol'];\n  @Input() beforeRemoveRow: Handsontable.GridSettings['beforeRemoveRow'];\n  @Input() beforeRender: Handsontable.GridSettings['beforeRender'];\n  @Input() beforeRenderer: Handsontable.GridSettings['beforeRenderer'];\n  @Input() beforeRowMove: Handsontable.GridSettings['beforeRowMove'];\n  @Input() beforeRowResize: Handsontable.GridSettings['beforeRowResize'];\n  @Input() beforeSetCellMeta: Handsontable.GridSettings['beforeSetCellMeta'];\n  @Input() beforeSetRangeEnd: Handsontable.GridSettings['beforeSetRangeEnd'];\n  @Input() beforeSetRangeStart: Handsontable.GridSettings['beforeSetRangeStart'];\n  @Input() beforeSetRangeStartOnly: Handsontable.GridSettings['beforeSetRangeStartOnly'];\n  @Input() beforeStretchingColumnWidth: Handsontable.GridSettings['beforeStretchingColumnWidth'];\n  @Input() beforeTouchScroll: Handsontable.GridSettings['beforeTouchScroll'];\n  @Input() beforeTrimRow: Handsontable.GridSettings['beforeTrimRow'];\n  @Input() beforeUndo: Handsontable.GridSettings['beforeUndo'];\n  @Input() beforeUndoStackChange: Handsontable.GridSettings['beforeUndoStackChange'];\n  @Input() beforeUnhideColumns: Handsontable.GridSettings['beforeUnhideColumns'];\n  @Input() beforeUnhideRows: Handsontable.GridSettings['beforeUnhideRows'];\n  @Input() beforeUnmergeCells: Handsontable.GridSettings['beforeUnmergeCells'];\n  @Input() beforeUntrimRow: Handsontable.GridSettings['beforeUntrimRow'];\n  @Input() beforeValidate: Handsontable.GridSettings['beforeValidate'];\n  @Input() beforeValueRender: Handsontable.GridSettings['beforeValueRender'];\n  @Input() beforeViewRender: Handsontable.GridSettings['beforeViewRender'];\n  @Input() construct: Handsontable.GridSettings['construct'];\n  @Input() init: Handsontable.GridSettings['init'];\n  @Input() modifyAutoColumnSizeSeed: Handsontable.GridSettings['modifyAutoColumnSizeSeed'];\n  @Input() modifyAutofillRange: Handsontable.GridSettings['modifyAutofillRange'];\n  @Input() modifyColHeader: Handsontable.GridSettings['modifyColHeader'];\n  @Input() modifyColumnHeaderHeight: Handsontable.GridSettings['modifyColumnHeaderHeight'];\n  @Input() modifyColWidth: Handsontable.GridSettings['modifyColWidth'];\n  @Input() modifyCopyableRange: Handsontable.GridSettings['modifyCopyableRange'];\n  @Input() modifyData: Handsontable.GridSettings['modifyData'];\n  @Input() modifyGetCellCoords: Handsontable.GridSettings['modifyGetCellCoords'];\n  @Input() modifyRowData: Handsontable.GridSettings['modifyRowData'];\n  @Input() modifyRowHeader: Handsontable.GridSettings['modifyRowHeader'];\n  @Input() modifyRowHeaderWidth: Handsontable.GridSettings['modifyRowHeaderWidth'];\n  @Input() modifyRowHeight: Handsontable.GridSettings['modifyRowHeight'];\n  @Input() modifySourceData: Handsontable.GridSettings['modifySourceData'];\n  @Input() modifyTransformEnd: Handsontable.GridSettings['modifyTransformEnd'];\n  @Input() modifyTransformStart: Handsontable.GridSettings['modifyTransformStart'];\n  @Input() persistentStateLoad: Handsontable.GridSettings['persistentStateLoad'];\n  @Input() persistentStateReset: Handsontable.GridSettings['persistentStateReset'];\n  @Input() persistentStateSave: Handsontable.GridSettings['persistentStateSave'];\n\n  constructor(\n    private _ngZone: NgZone,\n    private _hotTableRegisterer: HotTableRegisterer,\n    private _hotSettingsResolver: HotSettingsResolver,\n  ) {}\n\n  private get hotInstance(): Handsontable | null {\n    if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n      // Will return the Handsontable instance or `null` if it's not yet been created.\n      return this.__hotInstance;\n\n    } else {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n\n      console.warn(HOT_DESTROYED_WARNING);\n\n      return null;\n    }\n  }\n\n  private set hotInstance(hotInstance) {\n    this.__hotInstance = hotInstance;\n  }\n\n  ngAfterViewInit(): void {\n    const options: Handsontable.GridSettings = this._hotSettingsResolver.mergeSettings(this);\n\n    if (this.columnsComponents.length > 0) {\n      const columns = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      options['columns'] = columns;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance = new Handsontable.Core(this.container.nativeElement, options);\n\n      if (this.hotId) {\n        this._hotTableRegisterer.registerInstance(this.hotId, this.hotInstance);\n      }\n      // @ts-ignore\n      this.hotInstance.init();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this.hotInstance === null) {\n      return;\n    }\n\n    const newOptions: Handsontable.GridSettings = this._hotSettingsResolver.prepareChanges(changes);\n\n    this.updateHotTable(newOptions);\n  }\n\n  ngOnDestroy(): void {\n    this._ngZone.runOutsideAngular(() => {\n      if (this.hotInstance) {\n        this.hotInstance.destroy();\n      }\n    });\n\n    if (this.hotId) {\n      this._hotTableRegisterer.removeInstance(this.hotId);\n    }\n  }\n\n  updateHotTable(newSettings: Handsontable.GridSettings ): void {\n    if (!this.hotInstance) {\n      return;\n    }\n\n    this._ngZone.runOutsideAngular(() => {\n      this.hotInstance.updateSettings(newSettings, false);\n    });\n  }\n\n  onAfterColumnsChange(): void {\n    if (this.columnsComponents === void 0) {\n      return;\n    }\n\n    if (this.columnsComponents.length > 0) {\n      const columns: Handsontable.ColumnSettings[] = [];\n\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n\n      const newOptions = {\n        columns: columns\n      };\n\n      this.updateHotTable(newOptions);\n    }\n  }\n\n  onAfterColumnsNumberChange(): void {\n    const columns: Handsontable.ColumnSettings[] = [];\n\n    if (this.columnsComponents.length > 0) {\n      this.columnsComponents.forEach((column) => {\n        columns.push(this._hotSettingsResolver.mergeSettings(column));\n      });\n    }\n\n    this.updateHotTable({ columns });\n  }\n\n  addColumn(column: HotColumnComponent): void {\n    this.columnsComponents.push(column);\n    this.onAfterColumnsNumberChange();\n  }\n\n  removeColumn(column: HotColumnComponent): void {\n    const index: number = this.columnsComponents.indexOf(column);\n\n    this.columnsComponents.splice(index, 1);\n    this.onAfterColumnsNumberChange();\n  }\n\n}\n","import {\n  Component,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  Input,\n} from '@angular/core';\nimport { HotTableComponent } from './hot-table.component';\nimport Handsontable from 'handsontable/base';\n\n@Component({\n  selector: 'hot-column',\n  template: '',\n})\nexport class HotColumnComponent implements OnInit, OnChanges, OnDestroy {\n  private firstRun = true;\n  // handsontable column options\n  @Input() allowEmpty: Handsontable.ColumnSettings['allowEmpty'];\n  @Input() allowHtml: Handsontable.ColumnSettings['allowHtml'];\n  @Input() allowInvalid: Handsontable.ColumnSettings['allowInvalid'];\n  @Input() checkedTemplate: Handsontable.ColumnSettings['checkedTemplate'];\n  @Input() className: Handsontable.ColumnSettings['className'];\n  @Input() columnSorting: Handsontable.ColumnSettings['columnSorting'];\n  @Input() colWidths: Handsontable.ColumnSettings['colWidths'];\n  @Input() commentedCellClassName: Handsontable.ColumnSettings['commentedCellClassName'];\n  @Input() copyable: Handsontable.ColumnSettings['copyable'];\n  @Input() correctFormat: Handsontable.ColumnSettings['correctFormat'];\n  @Input() data: Handsontable.ColumnSettings['data'];\n  @Input() dateFormat: Handsontable.ColumnSettings['dateFormat'];\n  @Input() defaultDate: Handsontable.ColumnSettings['defaultDate'];\n  @Input() editor: Handsontable.ColumnSettings['editor'];\n  @Input() filteringCaseSensitive: Handsontable.ColumnSettings['filteringCaseSensitive'];\n  @Input() invalidCellClassName: Handsontable.ColumnSettings['invalidCellClassName'];\n  @Input() label: Handsontable.ColumnSettings['label'];\n  @Input() language: Handsontable.ColumnSettings['language'];\n  @Input() noWordWrapClassName: Handsontable.ColumnSettings['noWordWrapClassName'];\n  @Input() numericFormat: Handsontable.ColumnSettings['numericFormat'];\n  @Input() placeholder: Handsontable.ColumnSettings['placeholder'];\n  @Input() placeholderCellClassName: Handsontable.ColumnSettings['placeholderCellClassName'];\n  @Input() readOnly: Handsontable.ColumnSettings['readOnly'];\n  @Input() readOnlyCellClassName: Handsontable.ColumnSettings['readOnlyCellClassName'];\n  @Input() renderer: Handsontable.ColumnSettings['renderer'];\n  @Input() selectOptions: Handsontable.ColumnSettings['selectOptions'];\n  @Input() skipColumnOnPaste: Handsontable.ColumnSettings['skipColumnOnPaste'];\n  @Input() sortByRelevance: Handsontable.ColumnSettings['sortByRelevance'];\n  @Input() source: Handsontable.ColumnSettings['source'];\n  @Input() strict: Handsontable.ColumnSettings['strict'];\n  @Input() title: Handsontable.ColumnSettings['title'];\n  @Input() trimDropdown: Handsontable.ColumnSettings['trimDropdown'];\n  @Input() type: Handsontable.ColumnSettings['type'];\n  @Input() uncheckedTemplate: Handsontable.ColumnSettings['uncheckedTemplate'];\n  @Input() validator: Handsontable.ColumnSettings['validator'];\n  @Input() visibleRows: Handsontable.ColumnSettings['visibleRows'];\n  @Input() width: Handsontable.ColumnSettings['width'];\n  @Input() wordWrap: Handsontable.ColumnSettings['wordWrap'];\n\n  constructor(private parentComponent: HotTableComponent) {}\n\n  ngOnInit(): void {\n    this.firstRun = false;\n    this.parentComponent.addColumn(this);\n  }\n\n  ngOnChanges(): void {\n    if (this.firstRun) {\n      return;\n    }\n\n    this.parentComponent.onAfterColumnsChange();\n  }\n\n  ngOnDestroy(): void {\n    this.parentComponent.removeColumn(this);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HotTableComponent } from './hot-table.component';\nimport { HotColumnComponent } from './hot-column.component';\nimport { HotTableRegisterer } from './hot-table-registerer.service';\n\n@NgModule({\n  declarations: [\n    HotTableComponent,\n    HotColumnComponent,\n  ],\n  exports: [\n    HotTableComponent,\n    HotColumnComponent,\n  ]\n})\nexport class HotTableModule {\n  static version = '11.0.1';\n\n  public static forRoot(): ModuleWithProviders<HotTableModule> {\n    return {\n      ngModule: HotTableModule,\n      providers: [ HotTableRegisterer ],\n    };\n  }\n}\n"],"names":["Injectable","Component","ViewEncapsulation","NgZone","ViewChild","Input","NgModule"],"mappings":";;;;;;;;;;;;;;QAGM,SAAS,GAAG,IAAI,GAAG,EAAwB;;QAEpC,qBAAqB,GAAG,+EAA+E;QAClH;;QAEF;SAqBC;;;;;QAnBQ,wCAAW;;;;QAAlB,UAAmB,EAAU;;gBACrB,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC;YAErC,IAAI,WAAW,CAAC,WAAW,EAAE;gBAC3B,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBAEpC,OAAO,IAAI,CAAC;aACb;YAED,OAAO,WAAW,CAAC;SACpB;;;;;;QAEM,6CAAgB;;;;;QAAvB,UAAwB,EAAU,EAAE,QAAsB;YACxD,OAAO,SAAS,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;SACpC;;;;;QAEM,2CAAc;;;;QAArB,UAAsB,EAAU;YAC9B,OAAO,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;SAC7B;;oBApBFA,eAAU;;QAqBX,yBAAC;KArBD;;;;;;;;QCLM,iBAAiB,GAAa,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC;;QACvE,eAAe,GAAa,YAAY,CAAC,KAAK,CAAC,aAAa,EAAE;;QAEpE;SAiDC;;;;;QA/CC,2CAAa;;;;QAAb,UAAc,SAAS;;gBACf,gBAAgB,GAAG,OAAO,SAAS,CAAC,UAAU,CAAC,KAAK,QAAQ;;gBAC5D,cAAc,GAA8B,gBAAgB,GAAG,SAAS,CAAC,UAAU,CAAC,GAAG,EAAE;;gBACzF,OAAO,GAAG,eAAe,CAAC,MAAM,CAAC,iBAAiB,CAAC;YAEzD,OAAO,CAAC,OAAO;;;;YAAC,UAAA,GAAG;;oBACX,MAAM,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;;oBAC5C,MAAM;gBAEV,IAAI,gBAAgB,IAAI,MAAM,EAAE;oBAC9B,MAAM,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;iBACrC;gBAED,IAAI,SAAS,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;oBAC7B,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;iBACzB;gBAED,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;oBACrB,OAAO;iBAER;qBAAM,IAAI,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,EAAE;oBACjD,cAAc,CAAC,GAAG,CAAC;;;;oBAAG;wBAAA,iBAIrB;wBAJ8B,cAAO;6BAAP,UAAO,EAAP,qBAAO,EAAP,IAAO;4BAAP,yBAAO;;wBACpC,OAAO,SAAS,CAAC,OAAO,CAAC,GAAG;;;wBAAC;4BACzB,OAAO,MAAM,CAAC,KAAK,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;yBACnC,EAAC,CAAC;qBACJ,CAAA,CAAC;iBAEH;qBAAM;oBACL,cAAc,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;iBAC9B;aACF,EAAC,CAAC;YAEH,OAAO,cAAc,CAAC;SACvB;;;;;QAED,4CAAc;;;;QAAd,UAAe,OAAsB;;gBAC7B,MAAM,GAA8B,EAAE;;gBACtC,UAAU,GAAa,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YAEjD,UAAU,CAAC,OAAO;;;;YAAC,UAAC,KAAK;gBACvB,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;oBACjC,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC;iBAC7C;aACF,EAAC,CAAC;YAEH,OAAO,MAAM,CAAC;SACf;;oBAhDFA,eAAU;;QAiDX,0BAAC;KAjDD;;;;;;;;QC6TE,2BACU,OAAe,EACf,mBAAuC,EACvC,oBAAyC;YAFzC,YAAO,GAAP,OAAO,CAAQ;YACf,wBAAmB,GAAnB,mBAAmB,CAAoB;YACvC,yBAAoB,GAApB,oBAAoB,CAAqB;YA1S3C,kBAAa,GAAiB,IAAI,CAAC;YACnC,sBAAiB,GAAyB,EAAE,CAAC;YAG5C,UAAK,GAAG,EAAE,CAAC;SAuShB;QAEJ,sBAAY,0CAAW;;;;;YAAvB;gBACE,IAAI,CAAC,IAAI,CAAC,aAAa,KAAK,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE;;oBAGlF,OAAO,IAAI,CAAC,aAAa,CAAC;iBAE3B;qBAAM;oBACL,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBAEpD,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;oBAEpC,OAAO,IAAI,CAAC;iBACb;aACF;;;;;;YAED,UAAwB,WAAW;gBACjC,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC;aAClC;;;WAJA;;;;QAMD,2CAAe;;;QAAf;YAAA,iBAsBC;;gBArBO,OAAO,GAA8B,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC;YAExF,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;;oBAC/B,SAAO,GAAG,EAAE;gBAElB,IAAI,CAAC,iBAAiB,CAAC,OAAO;;;;gBAAC,UAAC,MAAM;oBACpC,SAAO,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC/D,EAAC,CAAC;gBAEH,OAAO,CAAC,SAAS,CAAC,GAAG,SAAO,CAAC;aAC9B;YAED,IAAI,CAAC,OAAO,CAAC,iBAAiB;;;YAAC;gBAC7B,KAAI,CAAC,WAAW,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,SAAS,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;gBAEhF,IAAI,KAAI,CAAC,KAAK,EAAE;oBACd,KAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,WAAW,CAAC,CAAC;iBACzE;;gBAED,KAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;aACzB,EAAC,CAAC;SACJ;;;;;QAED,uCAAW;;;;QAAX,UAAY,OAAsB;YAChC,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,EAAE;gBAC7B,OAAO;aACR;;gBAEK,UAAU,GAA8B,IAAI,CAAC,oBAAoB,CAAC,cAAc,CAAC,OAAO,CAAC;YAE/F,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;SACjC;;;;QAED,uCAAW;;;QAAX;YAAA,iBAUC;YATC,IAAI,CAAC,OAAO,CAAC,iBAAiB;;;YAAC;gBAC7B,IAAI,KAAI,CAAC,WAAW,EAAE;oBACpB,KAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;iBAC5B;aACF,EAAC,CAAC;YAEH,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACrD;SACF;;;;;QAED,0CAAc;;;;QAAd,UAAe,WAAsC;YAArD,iBAQC;YAPC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;gBACrB,OAAO;aACR;YAED,IAAI,CAAC,OAAO,CAAC,iBAAiB;;;YAAC;gBAC7B,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aACrD,EAAC,CAAC;SACJ;;;;QAED,gDAAoB;;;QAApB;YAAA,iBAkBC;YAjBC,IAAI,IAAI,CAAC,iBAAiB,KAAK,KAAK,CAAC,EAAE;gBACrC,OAAO;aACR;YAED,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;;oBAC/B,SAAO,GAAkC,EAAE;gBAEjD,IAAI,CAAC,iBAAiB,CAAC,OAAO;;;;gBAAC,UAAC,MAAM;oBACpC,SAAO,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC/D,EAAC,CAAC;;oBAEG,UAAU,GAAG;oBACjB,OAAO,EAAE,SAAO;iBACjB;gBAED,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;aACjC;SACF;;;;QAED,sDAA0B;;;QAA1B;YAAA,iBAUC;;gBATO,OAAO,GAAkC,EAAE;YAEjD,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrC,IAAI,CAAC,iBAAiB,CAAC,OAAO;;;;gBAAC,UAAC,MAAM;oBACpC,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC/D,EAAC,CAAC;aACJ;YAED,IAAI,CAAC,cAAc,CAAC,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;SAClC;;;;;QAED,qCAAS;;;;QAAT,UAAU,MAA0B;YAClC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACpC,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACnC;;;;;QAED,wCAAY;;;;QAAZ,UAAa,MAA0B;;gBAC/B,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC;YAE5D,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACnC;;oBA3aFC,cAAS,SAAC;wBACT,QAAQ,EAAE,WAAW;wBACrB,QAAQ,EAAE,qCAAqC;wBAC/C,aAAa,EAAEC,sBAAiB,CAAC,IAAI;wBACrC,SAAS,EAAE,CAAE,kBAAkB,EAAE,mBAAmB,CAAE;qBACvD;;;;oBApBCC,WAAM;oBASN,kBAAkB;oBAGX,mBAAmB;;;gCAUzBC,cAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;+BAKxCC,UAAK;4BACLA,UAAK;4CAELA,UAAK;iCACLA,UAAK;gCACLA,UAAK;wCACLA,UAAK;qCACLA,UAAK;mCACLA,UAAK;wCACLA,UAAK;qCACLA,UAAK;qCACLA,UAAK;kCACLA,UAAK;kCACLA,UAAK;kCACLA,UAAK;0CACLA,UAAK;2BACLA,UAAK;4BACLA,UAAK;sCACLA,UAAK;gCACLA,UAAK;iCACLA,UAAK;yCACLA,UAAK;yCACLA,UAAK;8BACLA,UAAK;oCACLA,UAAK;oCACLA,UAAK;gCACLA,UAAK;6CACLA,UAAK;+BACLA,UAAK;kCACLA,UAAK;+BACLA,UAAK;gCACLA,UAAK;oCACLA,UAAK;0CACLA,UAAK;6CACLA,UAAK;0CACLA,UAAK;oCACLA,UAAK;2BACLA,UAAK;iCACLA,UAAK;iCACLA,UAAK;kCACLA,UAAK;6CACLA,UAAK;mCACLA,UAAK;mCACLA,UAAK;6BACLA,UAAK;yCACLA,UAAK;iCACLA,UAAK;iCACLA,UAAK;6BACLA,UAAK;6CACLA,UAAK;8BACLA,UAAK;uCACLA,UAAK;sCACLA,UAAK;mCACLA,UAAK;+BACLA,UAAK;wCACLA,UAAK;6BACLA,UAAK;oCACLA,UAAK;iCACLA,UAAK;2CACLA,UAAK;4BACLA,UAAK;+BACLA,UAAK;iCACLA,UAAK;yCACLA,UAAK;uCACLA,UAAK;yCACLA,UAAK;oCACLA,UAAK;sCACLA,UAAK;8BACLA,UAAK;8BACLA,UAAK;iCACLA,UAAK;8BACLA,UAAK;8BACLA,UAAK;mCACLA,UAAK;mCACLA,UAAK;yCACLA,UAAK;oCACLA,UAAK;iCACLA,UAAK;0CACLA,UAAK;oCACLA,UAAK;2CACLA,UAAK;4CACLA,UAAK;sCACLA,UAAK;kCACLA,UAAK;+CACLA,UAAK;sCACLA,UAAK;mCACLA,UAAK;+BACLA,UAAK;4CACLA,UAAK;oCACLA,UAAK;+BACLA,UAAK;iCACLA,UAAK;qCACLA,UAAK;iCACLA,UAAK;6BACLA,UAAK;oCACLA,UAAK;oCACLA,UAAK;wCACLA,UAAK;qCACLA,UAAK;sCACLA,UAAK;6BACLA,UAAK;gCACLA,UAAK;gCACLA,UAAK;+BACLA,UAAK;6BACLA,UAAK;qCACLA,UAAK;+BACLA,UAAK;4BACLA,UAAK;mCACLA,UAAK;+BACLA,UAAK;qCACLA,UAAK;2BACLA,UAAK;wCACLA,UAAK;2BACLA,UAAK;gCACLA,UAAK;oDACLA,UAAK;iDACLA,UAAK;kCACLA,UAAK;4BACLA,UAAK;+BACLA,UAAK;oCAGLA,UAAK;oCACLA,UAAK;wCACLA,UAAK;yCACLA,UAAK;kCACLA,UAAK;2CACLA,UAAK;0CACLA,UAAK;wCACLA,UAAK;sCACLA,UAAK;wCACLA,UAAK;sCACLA,UAAK;qDACLA,UAAK;2CACLA,UAAK;2CACLA,UAAK;gCACLA,UAAK;qCACLA,UAAK;qCACLA,UAAK;qCACLA,UAAK;+BACLA,UAAK;oCACLA,UAAK;mCACLA,UAAK;uCACLA,UAAK;2CACLA,UAAK;yCACLA,UAAK;sDACLA,UAAK;4CACLA,UAAK;4CACLA,UAAK;kCACLA,UAAK;uCACLA,UAAK;wCACLA,UAAK;oDACLA,UAAK;wCACLA,UAAK;iDACLA,UAAK;uCACLA,UAAK;oCACLA,UAAK;gCACLA,UAAK;0CACLA,UAAK;kCACLA,UAAK;oCACLA,UAAK;sCACLA,UAAK;8CACLA,UAAK;gDACLA,UAAK;0CACLA,UAAK;6CACLA,UAAK;gDACLA,UAAK;iDACLA,UAAK;2CACLA,UAAK;0CACLA,UAAK;2CACLA,UAAK;yCACLA,UAAK;iCACLA,UAAK;8CACLA,UAAK;gCACLA,UAAK;2CACLA,UAAK;6CACLA,UAAK;0CACLA,UAAK;qCACLA,UAAK;qCACLA,UAAK;kCACLA,UAAK;oCACLA,UAAK;mCACLA,UAAK;qCACLA,UAAK;8CACLA,UAAK;4CACLA,UAAK;qCACLA,UAAK;2CACLA,UAAK;wCACLA,UAAK;8CACLA,UAAK;uCACLA,UAAK;yCACLA,UAAK;4CACLA,UAAK;+CACLA,UAAK;mCACLA,UAAK;gCACLA,UAAK;2CACLA,UAAK;yCACLA,UAAK;sCACLA,UAAK;oCACLA,UAAK;wCACLA,UAAK;qCACLA,UAAK;0CACLA,UAAK;oCACLA,UAAK;4DACLA,UAAK;yDACLA,UAAK;sCACLA,UAAK;qCACLA,UAAK;qCACLA,UAAK;mDACLA,UAAK;0CACLA,UAAK;mCACLA,UAAK;yCACLA,UAAK;2CACLA,UAAK;yCACLA,UAAK;uCACLA,UAAK;yCACLA,UAAK;uCACLA,UAAK;gDACLA,UAAK;4CACLA,UAAK;iCACLA,UAAK;sCACLA,UAAK;sCACLA,UAAK;gCACLA,UAAK;wCACLA,UAAK;wCACLA,UAAK;iDACLA,UAAK;6CACLA,UAAK;mCACLA,UAAK;wCACLA,UAAK;wCACLA,UAAK;qCACLA,UAAK;iCACLA,UAAK;4CACLA,UAAK;oCACLA,UAAK;2CACLA,UAAK;qCACLA,UAAK;uCACLA,UAAK;8CACLA,UAAK;4CACLA,UAAK;2CACLA,UAAK;4CACLA,UAAK;0CACLA,UAAK;kCACLA,UAAK;iCACLA,UAAK;4CACLA,UAAK;8CACLA,UAAK;iDACLA,UAAK;2CACLA,UAAK;sCACLA,UAAK;sCACLA,UAAK;mCACLA,UAAK;qCACLA,UAAK;oCACLA,UAAK;sCACLA,UAAK;wCACLA,UAAK;wCACLA,UAAK;0CACLA,UAAK;8CACLA,UAAK;kDACLA,UAAK;wCACLA,UAAK;oCACLA,UAAK;iCACLA,UAAK;4CACLA,UAAK;0CACLA,UAAK;uCACLA,UAAK;yCACLA,UAAK;sCACLA,UAAK;qCACLA,UAAK;wCACLA,UAAK;uCACLA,UAAK;gCACLA,UAAK;2BACLA,UAAK;+CACLA,UAAK;0CACLA,UAAK;sCACLA,UAAK;+CACLA,UAAK;qCACLA,UAAK;0CACLA,UAAK;iCACLA,UAAK;0CACLA,UAAK;oCACLA,UAAK;sCACLA,UAAK;2CACLA,UAAK;sCACLA,UAAK;uCACLA,UAAK;yCACLA,UAAK;2CACLA,UAAK;0CACLA,UAAK;2CACLA,UAAK;0CACLA,UAAK;;QA+HR,wBAAC;KA7aD,IA6aC;;;QAtaC,sCAA4D;;;;;QAE5D,0CAA2C;;;;;QAC3C,8CAAqD;;QAErD,qCAA6C;;QAC7C,kCAAoB;;QAEpB,kDAAmF;;QACnF,uCAA6D;;QAC7D,sCAA2D;;QAC3D,8CAA2E;;QAC3E,2CAAqE;;QACrE,yCAAiE;;QACjE,8CAA2E;;QAC3E,2CAAqE;;QACrE,2CAAqE;;QACrE,wCAA+D;;QAC/D,wCAA+D;;QAC/D,wCAA+D;;QAC/D,gDAA+E;;QAC/E,iCAAiD;;QACjD,kCAAmD;;QACnD,4CAAuE;;QACvE,sCAA2D;;QAC3D,uCAA6D;;QAC7D,+CAA6E;;QAC7E,+CAA6E;;QAC7E,oCAAuD;;QACvD,0CAAmE;;QACnE,0CAAmE;;QACnE,sCAA2D;;QAC3D,mDAAqF;;QACrF,qCAAyD;;QACzD,wCAA+D;;QAC/D,qCAAyD;;QACzD,sCAA2D;;QAC3D,0CAAmE;;QACnE,gDAA+E;;QAC/E,mDAAqF;;QACrF,gDAA+E;;QAC/E,0CAAmE;;QACnE,iCAAiD;;QACjD,uCAA6D;;QAC7D,uCAA6D;;QAC7D,wCAA+D;;QAC/D,mDAAqF;;QACrF,yCAAiE;;QACjE,yCAAiE;;QACjE,mCAAqD;;QACrD,+CAA6E;;QAC7E,uCAA6D;;QAC7D,uCAA6D;;QAC7D,mCAAqD;;QACrD,mDAAqF;;QACrF,oCAAuD;;QACvD,6CAAyE;;QACzE,4CAAuE;;QACvE,yCAAiE;;QACjE,qCAAyD;;QACzD,8CAA2E;;QAC3E,mCAAqD;;QACrD,0CAAmE;;QACnE,uCAA6D;;QAC7D,iDAAiF;;QACjF,kCAAmD;;QACnD,qCAAyD;;QACzD,uCAA6D;;QAC7D,+CAA6E;;QAC7E,6CAAyE;;QACzE,+CAA6E;;QAC7E,0CAAmE;;QACnE,4CAAuE;;QACvE,oCAAuD;;QACvD,oCAAuD;;QACvD,uCAA6D;;QAC7D,oCAAuD;;QACvD,oCAAuD;;QACvD,yCAAiE;;QACjE,yCAAiE;;QACjE,+CAA6E;;QAC7E,0CAAmE;;QACnE,uCAA6D;;QAC7D,gDAA+E;;QAC/E,0CAAmE;;QACnE,iDAAiF;;QACjF,kDAAmF;;QACnF,4CAAuE;;QACvE,wCAA+D;;QAC/D,qDAAyF;;QACzF,4CAAuE;;QACvE,yCAAiE;;QACjE,qCAAyD;;QACzD,kDAAmF;;QACnF,0CAAmE;;QACnE,qCAAyD;;QACzD,uCAA6D;;QAC7D,2CAAqE;;QACrE,uCAA6D;;QAC7D,mCAAqD;;QACrD,0CAAmE;;QACnE,0CAAmE;;QACnE,8CAA2E;;QAC3E,2CAA6B;;QAC7B,4CAAuE;;QACvE,mCAAqD;;QACrD,sCAA2D;;QAC3D,sCAA2D;;QAC3D,qCAAyD;;QACzD,mCAAqD;;QACrD,2CAAqE;;QACrE,qCAAyD;;QACzD,kCAAmD;;QACnD,yCAAiE;;QACjE,qCAA2D;;QAC3D,2CAAqE;;QACrE,iCAAiD;;QACjD,8CAA2E;;QAC3E,iCAAiD;;QACjD,sCAA2D;;QAC3D,0DAAmG;;QACnG,uDAA6F;;QAC7F,wCAA+D;;QAC/D,kCAAmD;;QACnD,qCAAyD;;QAGzD,0CAAmE;;QACnE,0CAAmE;;QACnE,8CAA2E;;QAC3E,+CAA6E;;QAC7E,wCAA+D;;QAC/D,iDAAiF;;QACjF,gDAA+E;;QAC/E,8CAA2E;;QAC3E,4CAAuE;;QACvE,8CAA2E;;QAC3E,4CAAuE;;QACvE,2DAAqG;;QACrG,iDAAiF;;QACjF,iDAAiF;;QACjF,sCAA2D;;QAC3D,2CAAqE;;QACrE,2CAAqE;;QACrE,2CAAqE;;QACrE,qCAAyD;;QACzD,0CAAmE;;QACnE,yCAAiE;;QACjE,6CAAyE;;QACzE,iDAAiF;;QACjF,+CAA6E;;QAC7E,4DAAuG;;QACvG,kDAAmF;;QACnF,kDAAmF;;QACnF,wCAA+D;;QAC/D,6CAAyE;;QACzE,8CAA2E;;QAC3E,0DAAmG;;QACnG,8CAA2E;;QAC3E,uDAA6F;;QAC7F,6CAAyE;;QACzE,0CAAmE;;QACnE,sCAA2D;;QAC3D,gDAA+E;;QAC/E,wCAA+D;;QAC/D,0CAAmE;;QACnE,4CAAuE;;QACvE,oDAAuF;;QACvF,sDAA2F;;QAC3F,gDAA+E;;QAC/E,mDAAqF;;QACrF,sDAA2F;;QAC3F,uDAA6F;;QAC7F,iDAAiF;;QACjF,gDAA+E;;QAC/E,iDAAiF;;QACjF,+CAA6E;;QAC7E,uCAA6D;;QAC7D,oDAAuF;;QACvF,sCAA2D;;QAC3D,iDAAiF;;QACjF,mDAAqF;;QACrF,gDAA+E;;QAC/E,2CAAqE;;QACrE,2CAAqE;;QACrE,wCAA+D;;QAC/D,0CAAmE;;QACnE,yCAAiE;;QACjE,2CAAqE;;QACrE,oDAAuF;;QACvF,kDAAmF;;QACnF,2CAAqE;;QACrE,iDAAiF;;QACjF,8CAA2E;;QAC3E,oDAAuF;;QACvF,6CAAyE;;QACzE,+CAA6E;;QAC7E,kDAAmF;;QACnF,qDAAyF;;QACzF,yCAAiE;;QACjE,sCAA2D;;QAC3D,iDAAiF;;QACjF,+CAA6E;;QAC7E,4CAAuE;;QACvE,0CAAmE;;QACnE,8CAA2E;;QAC3E,2CAAqE;;QACrE,gDAA+E;;QAC/E,0CAAmE;;QACnE,kEAAmH;;QACnH,+DAA6G;;QAC7G,4CAAuE;;QACvE,2CAAqE;;QACrE,2CAAqE;;QACrE,yDAAiG;;QACjG,gDAA+E;;QAC/E,yCAAiE;;QACjE,+CAA6E;;QAC7E,iDAAiF;;QACjF,+CAA6E;;QAC7E,6CAAyE;;QACzE,+CAA6E;;QAC7E,6CAAyE;;QACzE,sDAA2F;;QAC3F,kDAAmF;;QACnF,uCAA6D;;QAC7D,4CAAuE;;QACvE,4CAAuE;;QACvE,sCAA2D;;QAC3D,8CAA2E;;QAC3E,8CAA2E;;QAC3E,uDAA6F;;QAC7F,mDAAqF;;QACrF,yCAAiE;;QACjE,8CAA2E;;QAC3E,8CAA2E;;QAC3E,2CAAqE;;QACrE,uCAA6D;;QAC7D,kDAAmF;;QACnF,0CAAmE;;QACnE,iDAAiF;;QACjF,2CAAqE;;QACrE,6CAAyE;;QACzE,oDAAuF;;QACvF,kDAAmF;;QACnF,iDAAiF;;QACjF,kDAAmF;;QACnF,gDAA+E;;QAC/E,wCAA+D;;QAC/D,uCAA6D;;QAC7D,kDAAmF;;QACnF,oDAAuF;;QACvF,uDAA6F;;QAC7F,iDAAiF;;QACjF,4CAAuE;;QACvE,4CAAuE;;QACvE,yCAAiE;;QACjE,2CAAqE;;QACrE,0CAAmE;;QACnE,4CAAuE;;QACvE,8CAA2E;;QAC3E,8CAA2E;;QAC3E,gDAA+E;;QAC/E,oDAAuF;;QACvF,wDAA+F;;QAC/F,8CAA2E;;QAC3E,0CAAmE;;QACnE,uCAA6D;;QAC7D,kDAAmF;;QACnF,gDAA+E;;QAC/E,6CAAyE;;QACzE,+CAA6E;;QAC7E,4CAAuE;;QACvE,2CAAqE;;QACrE,8CAA2E;;QAC3E,6CAAyE;;QACzE,sCAA2D;;QAC3D,iCAAiD;;QACjD,qDAAyF;;QACzF,gDAA+E;;QAC/E,4CAAuE;;QACvE,qDAAyF;;QACzF,2CAAqE;;QACrE,gDAA+E;;QAC/E,uCAA6D;;QAC7D,gDAA+E;;QAC/E,0CAAmE;;QACnE,4CAAuE;;QACvE,iDAAiF;;QACjF,4CAAuE;;QACvE,6CAAyE;;QACzE,+CAA6E;;QAC7E,iDAAiF;;QACjF,gDAA+E;;QAC/E,iDAAiF;;QACjF,gDAA+E;;;;;QAG7E,oCAAuB;;;;;QACvB,gDAA+C;;;;;QAC/C,iDAAiD;;;;;;;;;QC9QnD,4BAAoB,eAAkC;YAAlC,oBAAe,GAAf,eAAe,CAAmB;YAzC9C,aAAQ,GAAG,IAAI,CAAC;SAyCkC;;;;QAE1D,qCAAQ;;;QAAR;YACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACtC;;;;QAED,wCAAW;;;QAAX;YACE,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,OAAO;aACR;YAED,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE,CAAC;SAC7C;;;;QAED,wCAAW;;;QAAX;YACE,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACzC;;oBA/DFJ,cAAS,SAAC;wBACT,QAAQ,EAAE,YAAY;wBACtB,QAAQ,EAAE,EAAE;qBACb;;;;oBANQ,iBAAiB;;;iCAUvBI,UAAK;gCACLA,UAAK;mCACLA,UAAK;sCACLA,UAAK;gCACLA,UAAK;oCACLA,UAAK;gCACLA,UAAK;6CACLA,UAAK;+BACLA,UAAK;oCACLA,UAAK;2BACLA,UAAK;iCACLA,UAAK;kCACLA,UAAK;6BACLA,UAAK;6CACLA,UAAK;2CACLA,UAAK;4BACLA,UAAK;+BACLA,UAAK;0CACLA,UAAK;oCACLA,UAAK;kCACLA,UAAK;+CACLA,UAAK;+BACLA,UAAK;4CACLA,UAAK;+BACLA,UAAK;oCACLA,UAAK;wCACLA,UAAK;sCACLA,UAAK;6BACLA,UAAK;6BACLA,UAAK;4BACLA,UAAK;mCACLA,UAAK;2BACLA,UAAK;wCACLA,UAAK;gCACLA,UAAK;kCACLA,UAAK;4BACLA,UAAK;+BACLA,UAAK;;QAoBR,yBAAC;KAhED,IAgEC;;;;;;QA3DC,sCAAwB;;QAExB,wCAA+D;;QAC/D,uCAA6D;;QAC7D,0CAAmE;;QACnE,6CAAyE;;QACzE,uCAA6D;;QAC7D,2CAAqE;;QACrE,uCAA6D;;QAC7D,oDAAuF;;QACvF,sCAA2D;;QAC3D,2CAAqE;;QACrE,kCAAmD;;QACnD,wCAA+D;;QAC/D,yCAAiE;;QACjE,oCAAuD;;QACvD,oDAAuF;;QACvF,kDAAmF;;QACnF,mCAAqD;;QACrD,sCAA2D;;QAC3D,iDAAiF;;QACjF,2CAAqE;;QACrE,yCAAiE;;QACjE,sDAA2F;;QAC3F,sCAA2D;;QAC3D,mDAAqF;;QACrF,sCAA2D;;QAC3D,2CAAqE;;QACrE,+CAA6E;;QAC7E,6CAAyE;;QACzE,oCAAuD;;QACvD,oCAAuD;;QACvD,mCAAqD;;QACrD,0CAAmE;;QACnE,kCAAmD;;QACnD,+CAA6E;;QAC7E,uCAA6D;;QAC7D,yCAAiE;;QACjE,mCAAqD;;QACrD,sCAA2D;;;;;QAE/C,6CAA0C;;;;;;;;;QCnDxD;SAmBC;;;;QANe,sBAAO;;;QAArB;YACE,OAAO;gBACL,QAAQ,EAAE,cAAc;gBACxB,SAAS,EAAE,CAAE,kBAAkB,CAAE;aAClC,CAAC;SACH;QAPM,sBAAO,GAAG,QAAQ,CAAC;;oBAX3BC,aAAQ,SAAC;wBACR,YAAY,EAAE;4BACZ,iBAAiB;4BACjB,kBAAkB;yBACnB;wBACD,OAAO,EAAE;4BACP,iBAAiB;4BACjB,kBAAkB;yBACnB;qBACF;;QAUD,qBAAC;KAnBD,IAmBC;;;QARC,uBAA0B;;;;;;;;;;;;;;;;;;"}